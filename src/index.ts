import { config } from "dotenv";
import { initializeSystem, checkSystemHealth } from "./utils/initialize";

try {
  config();

  (async () => {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ RAG Telegram Bot...");
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
      await initializeSystem();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
      const health = await checkSystemHealth();
      if (!health.healthy) {
        console.warn("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ:");
        health.issues.forEach(issue => console.warn(`  - ${issue}`));
      } else {
        console.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${health.stats.chunks} —á–∞–Ω–∫–æ–≤, ${health.stats.documents} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, ${health.stats.users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
      const { startBot } = await import("./bot/bot");
      await startBot();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∞—à–±–æ—Ä–¥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
      if (process.env.ENABLE_DASHBOARD === 'true') {
        console.log("üìä –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞...");
        const { startDashboard } = await import("./dashboard/dashboard");
        startDashboard();
      }
      
    } catch (err: unknown) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err);
      console.dir(err, { depth: null });
      process.exit(1);
    }
  })();

} catch (err: unknown) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:", err);
  console.dir(err, { depth: null });
  process.exit(1);
}