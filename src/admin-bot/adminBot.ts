import { Telegraf, Context, Markup } from "telegraf";
import dotenv from "dotenv";
dotenv.config();
import path from "path";
import fs from "fs";
import pool from "../utils/db";
import adminIds from "./admin_ids.json";

const token = process.env.ADMIN_BOT_TOKEN;
if (!token) throw new Error("ADMIN_BOT_TOKEN is not defined in .env");

function isAdmin(ctx: Context) {
  return ctx.from && adminIds.includes(ctx.from.id);
}

export function startAdminBot() {
  const bot = new Telegraf(token as string);

  bot.start((ctx: Context) => {
    if (!isAdmin(ctx)) {
      ctx.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
      return;
    }
    ctx.reply(
      "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–±–æ—Ç–∞!",
      Markup.keyboard([
        ["–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"],
        ["–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"],
        ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"],
        ["–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"]
      ]).resize()
    );
  });

  bot.hears(["/menu", "–ú–µ–Ω—é"], (ctx: Context) => {
    if (!isAdmin(ctx)) {
      ctx.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
      return;
    }
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      Markup.keyboard([
        ["–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"],
        ["–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"],
        ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"],
        ["–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"]
      ]).resize()
    );
  });

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
  bot.hears("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    ctx.reply("–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.");
  });
  bot.hears("–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    ctx.reply("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.");
  });
  bot.hears("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    ctx.reply("–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.");
  });
  bot.hears("–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    ctx.reply("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.");
  });

  // --- –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
  const uploadStates = new Map<number, { step: string; filename?: string; filePath?: string }>();

  bot.hears("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", async (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    uploadStates.set(ctx.from!.id, { step: "awaiting_file" });
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ Markdown —Ñ–∞–π–ª.");
  });

  bot.on("document", async (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    if (!ctx.message || !('document' in ctx.message)) return;
    const state = uploadStates.get(ctx.from!.id);
    if (!state || state.step !== "awaiting_file") return;

    const file = ctx.message.document;
    const ext = path.extname(file.file_name || "").toLowerCase();
    if (ext !== ".pdf" && ext !== ".md") {
      await ctx.reply("‚õîÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF –∏ Markdown (.md) —Ñ–∞–π–ª—ã.");
      return;
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const fileLink = await ctx.telegram.getFileLink(file.file_id);
    const rawDir = path.join(__dirname, "../data/raw");
    if (!fs.existsSync(rawDir)) fs.mkdirSync(rawDir, { recursive: true });
    const filePath = path.join(rawDir, file.file_name || `file_${Date.now()}${ext}`);
    const res = await fetch(fileLink.href);
    const buffer = await res.arrayBuffer();
    fs.writeFileSync(filePath, Buffer.from(buffer));

    uploadStates.set(ctx.from!.id, { step: "awaiting_category", filename: file.file_name, filePath });

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const catRes = await pool.query("SELECT id, name FROM categories WHERE parent_id IS NULL ORDER BY name");
    const categories = catRes.rows;
    const buttons = categories.map((c: any) => [c.name]);
    buttons.push(["+ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"]);
    await ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:",
      Markup.keyboard(buttons).oneTime().resize()
    );
  });

  bot.on("text", async (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    if (!ctx.message || !('text' in ctx.message)) return;
    const state = uploadStates.get(ctx.from!.id);
    if (!state) return; // –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏

    if (state.step === "awaiting_category") {
      const catName = ctx.message.text.trim();
      if (catName === "+ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é") {
        uploadStates.set(ctx.from!.id, { ...state, step: "awaiting_new_category" });
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
        return;
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      const catRes = await pool.query("SELECT id FROM categories WHERE name = $1 AND parent_id IS NULL", [catName]);
      let categoryId;
      if (catRes.rows.length > 0) {
        categoryId = catRes.rows[0].id;
      } else {
        await ctx.reply("‚õîÔ∏è –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.");
        return;
      }
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ –±–∞–∑—É
      const ext = state.filename?.split('.').pop()?.toLowerCase() || "unknown";
      const type = ext === "pdf" ? "pdf" : ext === "md" ? "md" : "unknown";
      await pool.query(
        "INSERT INTO documents (filename, category_id, type, uploader_id, original_name) VALUES ($1, $2, $3, $4, $5)",
        [state.filePath, categoryId, type, ctx.from?.id, state.filename]
      );
      uploadStates.delete(ctx.from!.id);
      await ctx.reply(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '${state.filename}' –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '${catName}'.\n–¢–∏–ø: ${type}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${catName}`,
        Markup.removeKeyboard());
      return;
    }
    if (state.step === "awaiting_new_category") {
      const newCat = ctx.message.text.trim();
      if (!newCat) {
        await ctx.reply("‚õîÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:");
        return;
      }
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const ins = await pool.query("INSERT INTO categories (name) VALUES ($1) RETURNING id", [newCat]);
      const categoryId = ins.rows[0].id;
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ –±–∞–∑—É
      const ext2 = state.filename?.split('.').pop()?.toLowerCase() || "unknown";
      const type2 = ext2 === "pdf" ? "pdf" : ext2 === "md" ? "md" : "unknown";
      await pool.query(
        "INSERT INTO documents (filename, category_id, type, uploader_id, original_name) VALUES ($1, $2, $3, $4, $5)",
        [state.filePath, categoryId, type2, ctx.from?.id, state.filename]
      );
      uploadStates.delete(ctx.from!.id);
      await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '${newCat}' —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç '${state.filename}' –∑–∞–≥—Ä—É–∂–µ–Ω.\n–¢–∏–ø: ${type2}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${newCat}`,
        Markup.removeKeyboard());
      return;
    }
  });

  bot.launch();
  console.log("–ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω");
}
