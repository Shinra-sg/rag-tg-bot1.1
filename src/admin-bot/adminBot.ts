import { Telegraf, Context, Markup } from "telegraf";
import dotenv from "dotenv";
dotenv.config();
import path from "path";
import fs from "fs";
import pool from "../utils/db";
import adminIds from "./admin_ids.json";

const token = process.env.ADMIN_BOT_TOKEN;
if (!token) throw new Error("ADMIN_BOT_TOKEN is not defined in .env");

function isAdmin(ctx: Context) {
  return ctx.from && adminIds.includes(ctx.from.id);
}

const PAGE_SIZE = 10;

// --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–æ–≤ ---
async function logAdminAction(ctx: Context, action: string, object_type: string, object_id: number | null, object_name: string | null, details: string = "") {
  try {
    await pool.query(
      `INSERT INTO admin_logs (admin_id, admin_username, action, object_type, object_id, object_name, details) VALUES ($1, $2, $3, $4, $5, $6, $7)`,
      [ctx.from?.id, ctx.from?.username ?? null, action, object_type, object_id, object_name, details]
    );
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:", e);
  }
}

export function startAdminBot() {
  const bot = new Telegraf(token as string);

  // --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ---
  const confirmStates = new Map<number, { type: 'document' | 'category'; id: number; name: string }>();

  const MAIN_MENU = Markup.keyboard([
    ["–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", "–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"],
    ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"]
  ]).resize();

  bot.start((ctx: Context) => {
    if (!isAdmin(ctx)) {
      ctx.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
      return;
    }
    ctx.reply(
      "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–±–æ—Ç–∞!",
      MAIN_MENU
    );
  });

  bot.hears(["/menu", "–ú–µ–Ω—é"], (ctx: Context) => {
    if (!isAdmin(ctx)) {
      ctx.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
      return;
    }
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      MAIN_MENU
    );
  });

  // --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ ---
  type PaginationState = {
    type: 'documents' | 'search';
    page: number;
    query?: string;
    total: number;
  };
  const paginationStates = new Map<number, PaginationState>();

  // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  bot.hears("–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", async (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    const page = 0;
    const res = await pool.query(`SELECT COUNT(*) FROM documents`);
    const total = parseInt(res.rows[0].count, 10);
    await showDocumentsPage(ctx, page, total);
    paginationStates.set(ctx.from!.id, { type: 'documents', page, total });
  });

  async function showDocumentsPage(ctx: Context, page: number, total: number) {
    const offset = page * PAGE_SIZE;
    const res = await pool.query(`
      SELECT d.id, d.original_name, d.type, d.uploaded_at, d.uploader_id, c.name AS category
      FROM documents d
      LEFT JOIN categories c ON d.category_id = c.id
      ORDER BY d.uploaded_at DESC
      LIMIT $1 OFFSET $2
    `, [PAGE_SIZE, offset]);
    if (res.rows.length === 0) {
      await ctx.reply("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.");
      return;
    }
    const list = res.rows.map((doc, i) =>
      `#${offset + i + 1}  ${doc.original_name || doc.filename}\n` +
      `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${doc.category || "‚Äî"}\n` +
      `–¢–∏–ø: ${doc.type}\n` +
      `–ó–∞–≥—Ä—É–∂–µ–Ω: ${new Date(doc.uploaded_at).toLocaleString()}\n` +
      `Uploader ID: ${doc.uploader_id}`
    ).join("\n\n");
    const buttons = [];
    if (page > 0) buttons.push("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
    if ((offset + PAGE_SIZE) < total) buttons.push("‚û°Ô∏è –î–∞–ª–µ–µ");
    await ctx.reply(list, buttons.length ? Markup.keyboard([buttons, ["–ú–µ–Ω—é"]]).oneTime().resize() : Markup.keyboard([["–ú–µ–Ω—é"]]).oneTime().resize());
  }

  // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  bot.hears("–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", async (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ uploader_id):");
    searchStates.set(ctx.from!.id, { step: "awaiting_query" });
  });

  // --- –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
  const uploadStates = new Map<number, { step: string; filename?: string; filePath?: string }>();

  bot.hears("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", async (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    uploadStates.set(ctx.from!.id, { step: "awaiting_file" });
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ Markdown —Ñ–∞–π–ª.");
  });

  bot.on("document", async (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    if (!ctx.message || !('document' in ctx.message)) return;
    const state = uploadStates.get(ctx.from!.id);
    if (!state || state.step !== "awaiting_file") return;

    const file = ctx.message.document;
    const ext = path.extname(file.file_name || "").toLowerCase();
    if (ext !== ".pdf" && ext !== ".md") {
      await ctx.reply("‚õîÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF –∏ Markdown (.md) —Ñ–∞–π–ª—ã.");
      return;
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const fileLink = await ctx.telegram.getFileLink(file.file_id);
    const rawDir = path.join(__dirname, "../data/raw");
    if (!fs.existsSync(rawDir)) fs.mkdirSync(rawDir, { recursive: true });
    const filePath = path.join(rawDir, file.file_name || `file_${Date.now()}${ext}`);
    const res = await fetch(fileLink.href);
    const buffer = await res.arrayBuffer();
    fs.writeFileSync(filePath, Buffer.from(buffer));

    uploadStates.set(ctx.from!.id, { step: "awaiting_category", filename: file.file_name, filePath });

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const catRes = await pool.query("SELECT id, name FROM categories WHERE parent_id IS NULL ORDER BY name");
    const categories = catRes.rows;
    const buttons = categories.map((c: any) => [c.name]);
    buttons.push(["+ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"]);
    await ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:",
      Markup.keyboard(buttons).oneTime().resize()
    );
  });

  // --- –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
  type DeleteState = { step: string; docs?: any[] };
  const deleteStates = new Map<number, DeleteState>();

  bot.hears("–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", async (ctx: Context) => {
    if (!isAdmin(ctx)) {
      console.log("–ù–µ –∞–¥–º–∏–Ω:", ctx.from?.id);
      return;
    }
    console.log("–ö–æ–º–∞–Ω–¥–∞ '–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç' –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç", ctx.from?.id);
    await ctx.reply("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...");
    deleteStates.set(ctx.from!.id, { step: "awaiting_doc_number" });
    try {
      const res = await pool.query(`
        SELECT d.id, d.original_name, d.filename, d.type, d.uploaded_at, c.name AS category
        FROM documents d
        LEFT JOIN categories c ON d.category_id = c.id
        ORDER BY d.uploaded_at DESC
        LIMIT 20
      `);
      if (res.rows.length === 0) {
        await ctx.reply("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.");
        deleteStates.delete(ctx.from!.id);
        return;
      }
      const list = res.rows.map((doc, i) =>
        `#${i+1}  ${doc.original_name || doc.filename}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${doc.category || "‚Äî"}\n–¢–∏–ø: ${doc.type}`
      ).join("\n\n");
      await ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ):\n\n" + list
      );
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      deleteStates.set(ctx.from!.id, { step: "awaiting_doc_number", docs: res.rows });
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", e);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.");
      deleteStates.delete(ctx.from!.id);
    }
  });

  // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
  type CategoryState = { step: string; categories?: any[]; selectedId?: number };
  const categoryStates = new Map<number, CategoryState>();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ)
  bot.hears("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", async (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    try {
      const res = await pool.query("SELECT id, name FROM categories ORDER BY name");
      if (res.rows.length === 0) {
        await ctx.reply("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é?", Markup.keyboard([["+ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"], ["–ú–µ–Ω—é"]]).oneTime().resize());
        categoryStates.set(ctx.from!.id, { step: "awaiting_create" });
        return;
      }
      const list = res.rows.map((cat, i) => `#${i+1}  ${cat.name}`).join("\n");
      await ctx.reply(
        "–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n" + list,
        Markup.keyboard([
          ["+ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "- –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"],
          ["–ú–µ–Ω—é"]
        ]).oneTime().resize()
      );
      categoryStates.set(ctx.from!.id, { step: "main", categories: res.rows });
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", e);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.");
    }
  });

  // --- –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
  type MoveState = { step: string; docs?: any[]; categories?: any[]; selectedDocId?: number };
  const moveStates = new Map<number, MoveState>();

  bot.hears("–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", async (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    try {
      const res = await pool.query(`
        SELECT d.id, d.original_name, d.filename, d.type, c.name AS category
        FROM documents d
        LEFT JOIN categories c ON d.category_id = c.id
        ORDER BY d.uploaded_at DESC
        LIMIT 20
      `);
      if (res.rows.length === 0) {
        await ctx.reply("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–µ—Ç.");
        return;
      }
      const list = res.rows.map((doc, i) =>
        `#${i+1}  ${doc.original_name || doc.filename}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${doc.category || "‚Äî"}\n–¢–∏–ø: ${doc.type}`
      ).join("\n\n");
      await ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ):\n\n" + list
      );
      moveStates.set(ctx.from!.id, { step: "awaiting_doc_number", docs: res.rows });
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:", e);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.");
    }
  });

  // --- –ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º ---
  type SearchState = { step: string };
  const searchStates = new Map<number, SearchState>();

  bot.on("text", async (ctx: Context) => {
    if (!isAdmin(ctx)) return;
    if (!ctx.message || !("text" in ctx.message)) return;
    const text = ctx.message.text.trim();

    // --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è ---
    const pagState = paginationStates.get(ctx.from!.id);
    if (pagState) {
      if (text === "‚û°Ô∏è –î–∞–ª–µ–µ") {
        const nextPage = pagState.page + 1;
        if (pagState.type === 'documents') {
          await showDocumentsPage(ctx, nextPage, pagState.total);
          paginationStates.set(ctx.from!.id, { ...pagState, page: nextPage });
          return;
        }
        if (pagState.type === 'search' && pagState.query) {
          await showSearchPage(ctx, pagState.query, nextPage, pagState.total);
          paginationStates.set(ctx.from!.id, { ...pagState, page: nextPage });
          return;
        }
      }
      if (text === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" && pagState.page > 0) {
        const prevPage = pagState.page - 1;
        if (pagState.type === 'documents') {
          await showDocumentsPage(ctx, prevPage, pagState.total);
          paginationStates.set(ctx.from!.id, { ...pagState, page: prevPage });
          return;
        }
        if (pagState.type === 'search' && pagState.query) {
          await showSearchPage(ctx, pagState.query, prevPage, pagState.total);
          paginationStates.set(ctx.from!.id, { ...pagState, page: prevPage });
          return;
        }
      }
    }

    // --- –ü–æ–∏—Å–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ---
    const searchState = searchStates.get(ctx.from!.id);
    if (searchState && searchState.step === "awaiting_query") {
      const query = text;
      if (!query) {
        await ctx.reply("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:");
        return;
      }
      const countRes = await pool.query(`
        SELECT COUNT(*) FROM documents d
        LEFT JOIN categories c ON d.category_id = c.id
        WHERE d.original_name ILIKE $1 OR d.filename ILIKE $1 OR c.name ILIKE $1 OR CAST(d.uploader_id AS TEXT) ILIKE $1
      `, [`%${query}%`]);
      const total = parseInt(countRes.rows[0].count, 10);
      await showSearchPage(ctx, query, 0, total);
      paginationStates.set(ctx.from!.id, { type: 'search', page: 0, query, total });
      searchStates.delete(ctx.from!.id);
      return;
    }

    // 1. –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const delState = deleteStates.get(ctx.from!.id);
    if (delState && delState.step === "awaiting_doc_number" && delState.docs) {
      const num = parseInt(text, 10);
      const docs = delState.docs;
      if (!num || num < 1 || num > docs.length) {
        await ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞.");
        return;
      }
      const doc = docs[num - 1];
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç '${doc.original_name || doc.filename}'?`, Markup.keyboard([["–î–∞"], ["–ù–µ—Ç"]]).oneTime().resize());
      confirmStates.set(ctx.from!.id, { type: 'document', id: doc.id, name: doc.original_name || doc.filename });
      deleteStates.delete(ctx.from!.id);
      return;
    }

    // 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    const state = uploadStates.get(ctx.from!.id);
    if (state) {
      if (state.step === "awaiting_category") {
        const catName = text;
        if (catName === "+ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é") {
          uploadStates.set(ctx.from!.id, { ...state, step: "awaiting_new_category" });
          await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
          return;
        }
        const catRes = await pool.query("SELECT id FROM categories WHERE name = $1 AND parent_id IS NULL", [catName]);
        let categoryId;
        if (catRes.rows.length > 0) {
          categoryId = catRes.rows[0].id;
        } else {
          await ctx.reply("‚õîÔ∏è –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.");
          return;
        }
        const ext = state.filename?.split('.').pop()?.toLowerCase() || "unknown";
        const type = ext === "pdf" ? "pdf" : ext === "md" ? "md" : "unknown";
        await pool.query(
          "INSERT INTO documents (filename, category_id, type, uploader_id, original_name) VALUES ($1, $2, $3, $4, $5)",
          [state.filePath, categoryId, type, ctx.from?.id, state.filename]
        );
        uploadStates.delete(ctx.from!.id);
        await ctx.reply(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '${state.filename}' –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '${catName}'.\n–¢–∏–ø: ${type}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${catName}`,
          Markup.removeKeyboard());
        await logAdminAction(ctx, "upload_document", "document", null, state.filename ?? null, `category: ${catName}`);
        return;
      }
      if (state.step === "awaiting_new_category") {
        const newCat = text;
        if (!newCat) {
          await ctx.reply("‚õîÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:");
          return;
        }
        const ins = await pool.query("INSERT INTO categories (name) VALUES ($1) RETURNING id", [newCat]);
        const categoryId = ins.rows[0].id;
        const ext2 = state.filename?.split('.').pop()?.toLowerCase() || "unknown";
        const type2 = ext2 === "pdf" ? "pdf" : ext2 === "md" ? "md" : "unknown";
        await pool.query(
          "INSERT INTO documents (filename, category_id, type, uploader_id, original_name) VALUES ($1, $2, $3, $4, $5)",
          [state.filePath, categoryId, type2, ctx.from?.id, state.filename]
        );
        uploadStates.delete(ctx.from!.id);
        await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '${newCat}' —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç '${state.filename}' –∑–∞–≥—Ä—É–∂–µ–Ω.\n–¢–∏–ø: ${type2}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${newCat}`,
          Markup.removeKeyboard());
        return;
      }
    }

    // --- –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
    const moveState = moveStates.get(ctx.from!.id);
    if (moveState) {
      if (moveState.step === "awaiting_doc_number" && moveState.docs) {
        const num = parseInt(text, 10);
        const docs = moveState.docs;
        if (!num || num < 1 || num > docs.length) {
          await ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞.");
          return;
        }
        const doc = docs[num - 1];
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const catRes = await pool.query("SELECT id, name FROM categories ORDER BY name");
        if (catRes.rows.length === 0) {
          await ctx.reply("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.");
          moveStates.delete(ctx.from!.id);
          return;
        }
        const list = catRes.rows.map((cat, i) => `#${i+1}  ${cat.name}`).join("\n");
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n" + list);
        moveStates.set(ctx.from!.id, { step: "awaiting_cat_number", docs, categories: catRes.rows, selectedDocId: doc.id });
        return;
      }
      if (moveState.step === "awaiting_cat_number" && moveState.categories && moveState.selectedDocId) {
        const num = parseInt(text, 10);
        const cats = moveState.categories;
        if (!num || num < 1 || num > cats.length) {
          await ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞.");
          return;
        }
        const cat = cats[num - 1];
        const doc = moveState.docs?.find((d: any) => d.id === moveState.selectedDocId);
        await pool.query("UPDATE documents SET category_id = $1 WHERE id = $2", [cat.id, moveState.selectedDocId]);
        await ctx.reply(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '${cat.name}'!`);
        await logAdminAction(ctx, "move_document", "document", moveState.selectedDocId, doc ? (doc.original_name || doc.filename) : null, `to_category: ${cat.name}`);
        moveStates.delete(ctx.from!.id);
        return;
      }
    }

    // --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
    const catState = categoryStates.get(ctx.from!.id);
    if (catState) {
      const text = ctx.message.text.trim();
      console.log("catState:", catState, "text:", text);
      if ((catState.step === "main" || catState.step === "awaiting_create") && text.includes("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")) {
        console.log("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, text:", text);
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
        categoryStates.set(ctx.from!.id, { step: "creating" });
        return;
      }
      if (catState.step === "creating") {
        if (!text) {
          await ctx.reply("‚õîÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:");
          return;
        }
        try {
          await pool.query("INSERT INTO categories (name) VALUES ($1)", [text]);
          await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '${text}' —Å–æ–∑–¥–∞–Ω–∞!`, Markup.keyboard([["–ú–µ–Ω—é"]]).oneTime().resize());
          await logAdminAction(ctx, "create_category", "category", null, text);
        } catch (e) {
          await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è —É–∂–µ –µ—Å—Ç—å.");
        }
        categoryStates.delete(ctx.from!.id);
        return;
      }
      if (catState.step === "main" && text.startsWith("-")) {
        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const cats = catState.categories || [];
        if (cats.length === 0) {
          await ctx.reply("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
          categoryStates.delete(ctx.from!.id);
          return;
        }
        const list = cats.map((cat, i) => `#${i+1}  ${cat.name}`).join("\n");
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" + list);
        categoryStates.set(ctx.from!.id, { step: "deleting", categories: cats });
        return;
      }
      if (catState.step === "deleting") {
        const cats = catState.categories || [];
        const num = parseInt(text, 10);
        if (!num || num < 1 || num > cats.length) {
          await ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞.");
          return;
        }
        const cat = cats[num - 1];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const docs = await pool.query("SELECT 1 FROM documents WHERE category_id = $1 LIMIT 1", [cat.id]);
        if (docs.rows.length > 0) {
          await ctx.reply("‚õîÔ∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏—Ö.");
          categoryStates.delete(ctx.from!.id);
          return;
        }
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '${cat.name}'?`, Markup.keyboard([["–î–∞"], ["–ù–µ—Ç"]]).oneTime().resize());
        confirmStates.set(ctx.from!.id, { type: 'category', id: cat.id, name: cat.name });
        categoryStates.delete(ctx.from!.id);
        return;
      }
      if (catState.step === "main" && text.startsWith("‚úèÔ∏è")) {
        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const cats = catState.categories || [];
        if (cats.length === 0) {
          await ctx.reply("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.");
          categoryStates.delete(ctx.from!.id);
          return;
        }
        const list = cats.map((cat, i) => `#${i+1}  ${cat.name}`).join("\n");
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:\n" + list);
        categoryStates.set(ctx.from!.id, { step: "renaming", categories: cats });
        return;
      }
      if (catState.step === "renaming") {
        const cats = catState.categories || [];
        const num = parseInt(text, 10);
        if (!num || num < 1 || num > cats.length) {
          await ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞.");
          return;
        }
        categoryStates.set(ctx.from!.id, { step: "renaming_new_name", categories: cats, selectedId: cats[num - 1].id });
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
        return;
      }
      if (catState.step === "renaming_new_name" && catState.selectedId) {
        if (!text) {
          await ctx.reply("‚õîÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:");
          return;
        }
        await pool.query("UPDATE categories SET name = $1 WHERE id = $2", [text, catState.selectedId]);
        await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '${text}'!`, Markup.keyboard([["–ú–µ–Ω—é"]]).oneTime().resize());
        await logAdminAction(ctx, "rename_category", "category", catState.selectedId, text);
        categoryStates.delete(ctx.from!.id);
        return;
      }
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ú–µ–Ω—é" ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (text === "–ú–µ–Ω—é") {
        categoryStates.delete(ctx.from!.id);
        await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", Markup.keyboard([
          ["–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"],
          ["–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"],
          ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"],
          ["–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"]
        ]).resize());
        return;
      }
    }

    // --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ---
    if (confirmStates.has(ctx.from!.id)) {
      if (text === "–î–∞") {
        const conf = confirmStates.get(ctx.from!.id)!;
        if (conf.type === 'document') {
          // –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
          const res = await pool.query("SELECT filename FROM documents WHERE id = $1", [conf.id]);
          await pool.query("DELETE FROM documents WHERE id = $1", [conf.id]);
          if (res.rows.length && fs.existsSync(res.rows[0].filename)) {
            fs.unlinkSync(res.rows[0].filename);
          }
          await ctx.reply(`–î–æ–∫—É–º–µ–Ω—Ç '${conf.name}' —É–¥–∞–ª—ë–Ω.`, Markup.keyboard([["–ú–µ–Ω—é"]]).oneTime().resize());
          await logAdminAction(ctx, "delete_document", "document", conf.id, conf.name);
        } else if (conf.type === 'category') {
          await pool.query("DELETE FROM categories WHERE id = $1", [conf.id]);
          await ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è '${conf.name}' —É–¥–∞–ª–µ–Ω–∞!`, Markup.keyboard([["–ú–µ–Ω—é"]]).oneTime().resize());
          await logAdminAction(ctx, "delete_category", "category", conf.id, conf.name);
        }
        confirmStates.delete(ctx.from!.id);
        return;
      } else if (text === "–ù–µ—Ç") {
        await ctx.reply("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", Markup.keyboard([["–ú–µ–Ω—é"]]).oneTime().resize());
        confirmStates.delete(ctx.from!.id);
        return;
      }
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on("text", (ctx) => {
      if (!isAdmin(ctx)) return;
      if (ctx.message && "text" in ctx.message) {
        console.log("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", ctx.message.text);
      }
    });
  });

  bot.launch();
  console.log("–ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω");
}

async function showSearchPage(ctx: Context, query: string, page: number, total: number) {
  const offset = page * PAGE_SIZE;
  const res = await pool.query(`
    SELECT d.id, d.original_name, d.filename, d.type, d.uploaded_at, d.uploader_id, c.name AS category
    FROM documents d
    LEFT JOIN categories c ON d.category_id = c.id
    WHERE d.original_name ILIKE $1 OR d.filename ILIKE $1 OR c.name ILIKE $1 OR CAST(d.uploader_id AS TEXT) ILIKE $1
    ORDER BY d.uploaded_at DESC
    LIMIT $2 OFFSET $3
  `, [`%${query}%`, PAGE_SIZE, offset]);
  if (res.rows.length === 0) {
    await ctx.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.");
    return;
  }
  const list = res.rows.map((doc, i) =>
    `#${offset + i + 1}  ${doc.original_name || doc.filename}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${doc.category || "‚Äî"}\n–¢–∏–ø: ${doc.type}\n–ó–∞–≥—Ä—É–∂–µ–Ω: ${new Date(doc.uploaded_at).toLocaleString()}\nUploader ID: ${doc.uploader_id}`
  ).join("\n\n");
  const buttons = [];
  if (page > 0) buttons.push("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
  if ((offset + PAGE_SIZE) < total) buttons.push("‚û°Ô∏è –î–∞–ª–µ–µ");
  await ctx.reply(list, buttons.length ? Markup.keyboard([buttons, ["–ú–µ–Ω—é"]]).oneTime().resize() : Markup.keyboard([["–ú–µ–Ω—é"]]).oneTime().resize());
}
