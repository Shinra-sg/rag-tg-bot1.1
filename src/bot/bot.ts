import { Telegraf, Context, Markup } from "telegraf";
import { searchInstructions } from "../utils/search";
import { askLLM } from "../utils/generateAnswer";

export function startBot() {
  const token = process.env.BOT_TOKEN;
  if (!token) throw new Error("BOT_TOKEN is not defined in .env");

  const bot = new Telegraf(token);

  bot.start((ctx: Context) => ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.",
    Markup.keyboard([
      ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
      ["–ü–æ–º–æ—â—å", "–û –ø—Ä–æ–µ–∫—Ç–µ"]
    ]).resize()
  ));

  bot.hears("–ü–æ–º–æ—â—å", (ctx: Context) => ctx.reply(
    "‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
  ));

  bot.hears("–û –ø—Ä–æ–µ–∫—Ç–µ", (ctx: Context) => ctx.reply(
    "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ PDF –∏ Markdown-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò."
  ));

  bot.hears("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", (ctx: Context) => ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
  ));

  bot.command("help", (ctx: Context) => ctx.reply(
    "‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö."
  ));

  bot.on("text", async (ctx: Context) => {
    const msg = ctx.message;
    if (!msg || !("text" in msg)) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
      return;
    }

    const text = msg.text;
    await ctx.reply(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: "${text}"`, Markup.removeKeyboard());

    const results = await searchInstructions(text);
    if (results && results.length > 0) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Ollama
      const context = results.map((r, i) => `–§—Ä–∞–≥–º–µ–Ω—Ç #${i+1}: ${r.content}`).join("\n\n");
      const prompt = `–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∫–æ–º–ø–∞–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ —ç—Ç–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö ‚Äî —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ–¥—ë–Ω –Ω–∏–∂–µ.\n\n–§—Ä–∞–≥–º–µ–Ω—Ç—ã:\n${context}\n\n–í–æ–ø—Ä–æ—Å: ${text}\n\n–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:`;
      let answer = "";
      try {
        answer = await askLLM(prompt, "deepseek-r1");
        // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è <think>...</think> –∏–∑ –æ—Ç–≤–µ—Ç–∞
        answer = answer.replace(/<think>[\s\S]*?<\/think>/gi, "").trim();
      } catch (e) {
        answer = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò.";
      }
      await ctx.reply(answer); // –ö—Ä–∞—Ç–∫–∏–π –ò–ò-–æ—Ç–≤–µ—Ç

      // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
      const reply = results.map((r, i) =>
        `#${i+1}\n${r.content}\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${r.filename} (${r.source_ref})`
      ).join("\n\n");
      await ctx.reply(reply); // –¢–æ–ª—å–∫–æ —Ü–∏—Ç–∞—Ç—ã
    } else {
      await ctx.reply("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. [fallback]");
    }
  });

  bot.launch();
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
}