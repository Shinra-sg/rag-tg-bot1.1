import { Telegraf, Context, Markup } from "telegraf";
import { searchInstructions } from "../utils/search";
import { searchInstructionsWithAccess, hasAnyAccess } from "../utils/searchWithAccess";
import { hybridSearch, smartSearch, SearchResult } from "../utils/hybridSearch";
import { askLLM } from "../utils/generateAnswer";
import { formatSearchResults, formatSummary } from "../utils/formatSources";
import { formatSearchResultsPlain, formatSummaryPlain } from "../utils/formatSourcesPlain";
import { 
  logSearch, 
  getUserAnalytics, 
  addToFavorites, 
  removeFromFavorites, 
  getUserSearchHistory,
  getPopularQueries 
} from "../utils/analytics";
import { performFullCleanup, getDatabaseStats } from "../utils/cleanup";
import { 
  getDocumentByOriginalName, 
  documentFileExists, 
  getDocumentFileSize, 
  formatFileSize, 
  getMimeType,
  createDownloadableCopy,
  cleanupTempFiles
} from "../utils/documentDownload";

export function startBot() {
  const token = process.env.BOT_TOKEN;
  if (!token) throw new Error("BOT_TOKEN is not defined in .env");

  const bot = new Telegraf(token);
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userSearchResults = new Map<number, SearchResult[]>();
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const lastBotMessages = new Map<number, number[]>();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
  function logAction(action: string, userId?: number, details?: any) {
    console.log(`[${new Date().toISOString()}] Action: ${action}, User: ${userId}, Details:`, details);
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
  async function deleteLastBotMessages(ctx: Context) {
    const userId = ctx.from?.id;
    if (userId && lastBotMessages.has(userId)) {
      const messagesToDelete = lastBotMessages.get(userId)!;
      console.log(`[${new Date().toISOString()}] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ ${messagesToDelete.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      let deletedCount = 0;
      for (const msgId of messagesToDelete) {
        try {
          await ctx.telegram.deleteMessage(ctx.chat!.id, msgId);
          deletedCount++;
          console.log(`[${new Date().toISOString()}] ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        } catch (e) {
          // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          console.log(`[${new Date().toISOString()}] ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${msgId} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        }
      }
      
      console.log(`[${new Date().toISOString()}] üìä –£–¥–∞–ª–µ–Ω–æ ${deletedCount}/${messagesToDelete.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      lastBotMessages.delete(userId);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
  async function updateLastMessageWithButtons(ctx: Context, text: string, buttons: any) {
    const userId = ctx.from?.id;
    if (!userId) return;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
    if (lastBotMessages.has(userId)) {
      const messagesToDelete = lastBotMessages.get(userId)!;
      if (messagesToDelete.length > 1) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        for (let i = 0; i < messagesToDelete.length - 1; i++) {
          try {
            await ctx.telegram.deleteMessage(ctx.chat!.id, messagesToDelete[i]);
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
          }
        }
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const lastMessageId = messagesToDelete[messagesToDelete.length - 1];
        lastBotMessages.set(userId, [lastMessageId]);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
      await ctx.telegram.editMessageText(
        ctx.chat!.id,
        lastBotMessages.get(userId)?.[0],
        undefined,
        text,
        {
          parse_mode: 'Markdown',
          ...buttons
        }
      );
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const newMsg = await ctx.reply(text, {
        parse_mode: 'Markdown',
        ...buttons
      });
      lastBotMessages.set(userId, [newMsg.message_id]);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã
  async function scheduleCleanup() {
    // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    setInterval(async () => {
      try {
        console.log("üßπ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã...");
        const cleanupResult = await performFullCleanup();
        
        if (cleanupResult.success) {
          console.log(`‚úÖ –ü–ª–∞–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${cleanupResult.message}`);
        } else {
          console.warn(`‚ö†Ô∏è –ü–ª–∞–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏: ${cleanupResult.message}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        const stats = await getDatabaseStats();
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: ${stats.totalSize} –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä`);
        
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–µ:", error);
      }
    }, 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
  }

  bot.start(async (ctx: Context) => {
    await deleteLastBotMessages(ctx);
    const welcomeMessage = `üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–ø–æ–º–æ—â–Ω–∏–∫!*

–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üîç –ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ üìÑ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Ü–∏—Ç–∞—Ç—ã
‚Ä¢ üìÅ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /about ‚Äî –æ –ø—Ä–æ–µ–∫—Ç–µ`;

    const msg = await ctx.reply(welcomeMessage, {
      parse_mode: 'Markdown',
      ...Markup.keyboard([
        ["üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ"]
      ]).resize()
    });
    // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ lastBotMessages
    // –û–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  });

  bot.hears("–ü–æ–º–æ—â—å", async (ctx: Context) => {
    const helpMessage = `‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞*

*–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:*
1. –ù–∞–∂–º–∏—Ç–µ "üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
2. –Ø –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN?"
‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ"
‚Ä¢ "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–ø—É—Å–∫–∞"
‚Ä¢ "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üìÑ "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏" ‚Äî –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
‚Ä¢ üìÅ "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª" ‚Äî –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
‚Ä¢ üîÑ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" ‚Äî –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫

*–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç:*
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.`;

    const buttons = Markup.inlineKeyboard([
      [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
      [Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
    ]);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    const userId = ctx.from?.id;
    if (userId && lastBotMessages.has(userId)) {
      await updateLastMessageWithButtons(ctx, helpMessage, buttons);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      const msg = await ctx.reply(helpMessage, {
        parse_mode: 'Markdown',
        ...buttons
      });
      lastBotMessages.set(userId!, [msg.message_id]);
    }
  });

  bot.hears("–û –ø—Ä–æ–µ–∫—Ç–µ", async (ctx: Context) => {
    const aboutMessage = `ü§ñ *–û –ø—Ä–æ–µ–∫—Ç–µ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞*

*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:*
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

*–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
‚Ä¢ üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (RAG)
‚Ä¢ ü§ñ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ò–ò (Ollama)
‚Ä¢ üìä PostgreSQL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º pgvector
‚Ä¢ üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF –∏ Markdown

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º
‚Ä¢ –†–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º

*–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:*
–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;

    const buttons = Markup.inlineKeyboard([
      [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
      [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
    ]);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    const userId = ctx.from?.id;
    if (userId && lastBotMessages.has(userId)) {
      await updateLastMessageWithButtons(ctx, aboutMessage, buttons);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      const msg = await ctx.reply(aboutMessage, {
        parse_mode: 'Markdown',
        ...buttons
      });
      lastBotMessages.set(userId!, [msg.message_id]);
    }
  });

  bot.hears("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", async (ctx: Context) => {
    const askMessage = `üîç *–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å*

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã?"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞?"
‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏"
‚Ä¢ "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ"

*–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

*–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É!* üöÄ`;

    const buttons = Markup.removeKeyboard();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    const userId = ctx.from?.id;
    if (userId && lastBotMessages.has(userId)) {
      await updateLastMessageWithButtons(ctx, askMessage, buttons);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      const msg = await ctx.reply(askMessage, {
        parse_mode: 'Markdown',
        ...buttons
      });
      lastBotMessages.set(userId!, [msg.message_id]);
    }
  });

  bot.command("help", async (ctx: Context) => {
    await deleteLastBotMessages(ctx);
    const msg = await ctx.reply(
      "‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö."
    );
    const userId = ctx.from?.id;
    if (userId) {
      lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.on("text", async (ctx: Context) => {
    const userId = ctx.from?.id;
    const messageText = ctx.message && "text" in ctx.message ? ctx.message.text : "";
    logAction("text_message", userId, { text: messageText.substring(0, 50) + "..." });
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
    if (userId && lastBotMessages.has(userId)) {
      const messagesToDelete = lastBotMessages.get(userId)!;
      if (messagesToDelete.length > 1) {
        console.log(`[${new Date().toISOString()}] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ ${messagesToDelete.length - 1} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        for (let i = 0; i < messagesToDelete.length - 1; i++) {
          try {
            await ctx.telegram.deleteMessage(ctx.chat!.id, messagesToDelete[i]);
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
          }
        }
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const lastMessageId = messagesToDelete[messagesToDelete.length - 1];
        lastBotMessages.set(userId, [lastMessageId]);
      }
    }

    const msg = ctx.message;
    if (!msg || !("text" in msg)) {
      const errorText = `‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN?"
‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
‚Ä¢ "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—É—Å–∫–∞"`;

      const errorButtons = Markup.inlineKeyboard([
        [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
        [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"), Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
      ]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      if (userId && lastBotMessages.has(userId)) {
        await updateLastMessageWithButtons(ctx, errorText, errorButtons);
      } else {
        const errorMsg = await ctx.reply(errorText, {
          parse_mode: 'Markdown',
          ...errorButtons
        });
        lastBotMessages.set(userId!, [errorMsg.message_id]);
      }
      return;
    }

    const text = msg.text;
    const startTime = Date.now();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    const processingText = `üîç *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...*

*–ó–∞–ø—Ä–æ—Å:* "${text}"

‚è≥ –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...`;

    const processingButtons = Markup.removeKeyboard();

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    let processingMsgId: number;
    if (userId && lastBotMessages.has(userId)) {
      await updateLastMessageWithButtons(ctx, processingText, processingButtons);
      processingMsgId = lastBotMessages.get(userId)![0];
    } else {
      const processingMsg = await ctx.reply(processingText, {
        parse_mode: 'Markdown',
        ...processingButtons
      });
      processingMsgId = processingMsg.message_id;
      lastBotMessages.set(userId!, [processingMsgId]);
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
      const username = ctx.from?.username;
      let results: SearchResult[] | null = null;
      let searchType: 'vector' | 'keyword' | 'hybrid' = 'hybrid';
      
      if (username) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        const hasAccess = await hasAnyAccess(username);
        if (!hasAccess) {
          const noAccessMessage = `üîí *–î–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∑–∞–∫—Ä—ã—Ç*

–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.

*–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:*
‚Ä¢ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
‚Ä¢ –ö–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è

*–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:*
1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã
2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à username: @${username}
3. –û–±—ä—è—Å–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:*
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "‚ÑπÔ∏è –ü–æ–º–æ—â—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞`;

          await ctx.reply(noAccessMessage, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
              [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")],
              [Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
            ])
          });
          if (userId) {
            lastBotMessages.set(userId, [processingMsgId]);
          }
          return;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
        try {
          const hybridResults = await hybridSearch(text, { maxResults: 5 });
          results = hybridResults;
          searchType = hybridResults[0]?.search_type || 'hybrid';
          
          //–≤–æ—Ç —Ç—É—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫: const vectorResults = await vectorSearch(text, 5);
          //results = vectorResults;
          //searchType = 'vector';
          
        } catch (e) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π:", e);
          const fallbackResults = await searchInstructionsWithAccess(text, username);
          results = fallbackResults.map(r => ({
            content: r.content,
            filename: r.filename,
            source_ref: r.source_ref,
            score: 1.0,
            search_type: 'vector' as const
          }));
          searchType = 'vector';
        }
      } else {
        // –ï—Å–ª–∏ username –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
        try {
          const hybridResults = await hybridSearch(text, { maxResults: 5 });
          results = hybridResults;
          searchType = hybridResults[0]?.search_type || 'hybrid';
        } catch (e) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π:", e);
          const fallbackResults = await searchInstructions(text);
          results = fallbackResults.map(r => ({
            content: r.content,
            filename: r.filename,
            source_ref: r.source_ref,
            score: 1.0,
            search_type: 'vector' as const
          }));
          searchType = 'vector';
        }
      }
      
      if (results && results.length > 0) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Ollama
        const context = results.map((r, i) => `–§—Ä–∞–≥–º–µ–Ω—Ç #${i+1}: ${r.content}`).join("\n\n");
        const prompt = `–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∫–æ–º–ø–∞–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ —ç—Ç–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö ‚Äî —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ–¥—ë–Ω –Ω–∏–∂–µ.\n\n–§—Ä–∞–≥–º–µ–Ω—Ç—ã:\n${context}\n\n–í–æ–ø—Ä–æ—Å: ${text}\n\n–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:`;
        let answer = "";
        try {
          answer = await askLLM(prompt, "deepseek-r1");
          // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è <think>...</think> –∏–∑ –æ—Ç–≤–µ—Ç–∞
          answer = answer.replace(/<think>[\s\S]*?<\/think>/gi, "").trim();
        } catch (e) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò:", e);
          answer = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.";
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userId) {
          userSearchResults.set(userId, results);
          console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${results.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
          results.forEach((r, i) => {
            console.log(`  [${i}] ${r.filename}`);
          });
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        const responseTime = Date.now() - startTime;
        if (userId) {
          await logSearch(userId, username, text, searchType, results.length, responseTime, true);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        let summary;
        try {
          summary = formatSummary(results);
        } catch (error) {
          console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ Markdown –≤ —Å–≤–æ–¥–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º plain —Ñ–æ—Ä–º–∞—Ç:", error);
          summary = formatSummaryPlain(results);
        }

        const fullAnswer = `${answer}\n\n${summary}`;

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const answerButtons = Markup.inlineKeyboard([
          [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
          [Markup.button.callback("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", "show_sources")],
          [Markup.button.callback("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", `favorite_${text.substring(0, 20).replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s]/g, '')}`)],
          [Markup.button.callback("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", "search_history"), Markup.button.callback("üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", "popular_queries")],
          [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"), Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")],
          ...results.map((r, index) => [Markup.button.callback(`üìÅ –°–∫–∞—á–∞—Ç—å ${r.filename.substring(0, 20)}`, `download_${index}`)])
        ]);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        if (userId && lastBotMessages.has(userId)) {
          await updateLastMessageWithButtons(ctx, fullAnswer, answerButtons);
        } else {
          const answerMsg = await ctx.reply(fullAnswer, {
            parse_mode: 'Markdown',
            ...answerButtons
          });
          lastBotMessages.set(userId!, [answerMsg.message_id]);
        }
      } else {
        const noResultsText = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*

*–ó–∞–ø—Ä–æ—Å:* "${text}"

‚ùå *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.

*–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
‚Ä¢ –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`;

        const noResultsButtons = Markup.inlineKeyboard([
          [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
          [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"), Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
        ]);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        if (userId && lastBotMessages.has(userId)) {
          await updateLastMessageWithButtons(ctx, noResultsText, noResultsButtons);
        } else {
          const noResultsMsg = await ctx.reply(noResultsText, {
            parse_mode: 'Markdown',
            ...noResultsButtons
          });
          lastBotMessages.set(userId!, [noResultsMsg.message_id]);
        }
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
      const errorText = `‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*

–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "‚ÑπÔ∏è –ü–æ–º–æ—â—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏`;

      const errorButtons = Markup.inlineKeyboard([
        [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
        [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
      ]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
      if (userId && lastBotMessages.has(userId)) {
        await updateLastMessageWithButtons(ctx, errorText, errorButtons);
      } else {
        const errorMsg = await ctx.reply(errorText, {
          parse_mode: 'Markdown',
          ...errorButtons
        });
        lastBotMessages.set(userId!, [errorMsg.message_id]);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ inline keyboard
  bot.action("ask_question", async (ctx) => {
    try {
      logAction("ask_question", ctx.from?.id);
      await ctx.answerCbQuery();
      
      const askMessage = `üîç *–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å*

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã?"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞?"
‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏"
‚Ä¢ "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ"

*–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

*–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É!* üöÄ`;

      const buttons = Markup.removeKeyboard();
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      const userId = ctx.from?.id;
      if (userId && lastBotMessages.has(userId)) {
        await updateLastMessageWithButtons(ctx, askMessage, buttons);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        const msg = await ctx.reply(askMessage, {
          parse_mode: 'Markdown',
          ...buttons
        });
        lastBotMessages.set(userId!, [msg.message_id]);
      }
    } catch (error) {
      console.error("Error in ask_question handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });
  bot.action("help", async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const helpMessage = `‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞*

*–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:*
1. –ù–∞–∂–º–∏—Ç–µ "üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
2. –Ø –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN?"
‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ"
‚Ä¢ "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–ø—É—Å–∫–∞"
‚Ä¢ "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üìÑ "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏" ‚Äî –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
‚Ä¢ üìÅ "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª" ‚Äî –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
‚Ä¢ üîÑ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" ‚Äî –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫

*–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç:*
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.`;

      const buttons = Markup.inlineKeyboard([
        [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
        [Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
      ]);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      const userId = ctx.from?.id;
      if (userId && lastBotMessages.has(userId)) {
        await updateLastMessageWithButtons(ctx, helpMessage, buttons);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        const msg = await ctx.reply(helpMessage, {
          parse_mode: 'Markdown',
          ...buttons
        });
        lastBotMessages.set(userId!, [msg.message_id]);
      }
    } catch (error) {
      console.error("Error in help handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });
  bot.action("about", async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const aboutMessage = `ü§ñ *–û –ø—Ä–æ–µ–∫—Ç–µ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞*

*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:*
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

*–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
‚Ä¢ üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (RAG)
‚Ä¢ ü§ñ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ò–ò (Ollama)
‚Ä¢ üìä PostgreSQL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º pgvector
‚Ä¢ üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF –∏ Markdown

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º
‚Ä¢ –†–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º

*–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:*
–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;

      const buttons = Markup.inlineKeyboard([
        [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
        [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
      ]);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      const userId = ctx.from?.id;
      if (userId && lastBotMessages.has(userId)) {
        await updateLastMessageWithButtons(ctx, aboutMessage, buttons);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        const msg = await ctx.reply(aboutMessage, {
          parse_mode: 'Markdown',
          ...buttons
        });
        lastBotMessages.set(userId!, [msg.message_id]);
      }
    } catch (error) {
      console.error("Error in about handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });
  
  bot.action("show_sources", async (ctx) => {
    try {
      await deleteLastBotMessages(ctx);
      logAction("show_sources", ctx.from?.id);
      await ctx.answerCbQuery();
      const userId = ctx.from?.id;
      
      if (userId && userSearchResults.has(userId)) {
        const results = userSearchResults.get(userId)!;
        
        try {
          // –ü—Ä–æ–±—É–µ–º —Å Markdown
          const formattedSources = formatSearchResults(results);
          const sourcesMsg = await ctx.reply(formattedSources, { parse_mode: 'Markdown' });
          if (userId) {
            lastBotMessages.set(userId, [sourcesMsg.message_id]);
          }
        } catch (error) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º plain –≤–µ—Ä—Å–∏—é
          console.log("Markdown parsing error, using plain format:", error);
          const formattedSources = formatSearchResultsPlain(results);
          const sourcesMsg = await ctx.reply(formattedSources);
          if (userId) {
            lastBotMessages.set(userId, [sourcesMsg.message_id]);
          }
        }
      } else {
        const noResultsMsg = `‚ùå *–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*

–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, –∑–∞–¥–∞–≤ –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"`;

        const errorMsg = await ctx.reply(noResultsMsg, {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
          ])
        });
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
      }
    } catch (error) {
      console.error("Error in show_sources handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  bot.action(/^favorite_(.+)$/, async (ctx) => {
    try {
      await deleteLastBotMessages(ctx);
      await ctx.answerCbQuery();
      const userId = ctx.from?.id;
      if (!userId) return;
      
      const query = ctx.match[1];
      await addToFavorites(userId, query);
      
      const msg = await ctx.reply(`‚≠ê *–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ*

–ó–∞–ø—Ä–æ—Å "${query}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.

*–ß—Ç–æ –¥–∞–ª—å—à–µ?*
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞`, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback("‚≠ê –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ", "my_favorites")],
          [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
          [Markup.button.callback("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", "search_history")]
        ])
      });
      
      // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
    } catch (error) {
      console.error("Error in favorite handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
  bot.action(/^download_(\d+)$/, async (ctx) => {
    try {
      await deleteLastBotMessages(ctx);
      await ctx.answerCbQuery();
      const userId = ctx.from?.id;
      if (!userId) return;
      
      const index = parseInt(ctx.match[1]);
      
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResults = userSearchResults.get(userId);
      if (!userResults || !userResults[index]) {
        console.log(`‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –∏–Ω–¥–µ–∫—Å ${index}`);
        console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`, userResults ? userResults.length : 0);
        const msg = await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ`, {
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
          ])
        });
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
        return;
      }
      
      const result = userResults[index];
      const filename = result.filename;
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${filename}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
      const username = ctx.from?.username;
      const hasAccess = username ? await hasAnyAccess(username) : false;
      if (!hasAccess) {
        const msg = await ctx.reply(`‚õîÔ∏è –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω

–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É "${filename}".

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å`, {
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
          ])
        });
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
      const documentInfo = await getDocumentByOriginalName(filename);
      if (!documentInfo) {
        const msg = await ctx.reply(`‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω

–î–æ–∫—É–º–µ–Ω—Ç "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω
‚Ä¢ –û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö`, {
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
          ])
        });
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!documentFileExists(documentInfo)) {
        const msg = await ctx.reply(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω

–î–æ–∫—É–º–µ–Ω—Ç "${filename}" –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –§–∞–π–ª –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –û—à–∏–±–∫–∞ –≤ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É`, {
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
          ])
        });
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const fileSize = getDocumentFileSize(documentInfo);
      const formattedSize = formatFileSize(fileSize);
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const tempPath = createDownloadableCopy(documentInfo);
      if (!tempPath) {
        const msg = await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞

–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∞–π–ª "${filename}" –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞`, {
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
          ])
        });
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      try {
        await ctx.replyWithDocument({
          source: tempPath,
          filename: documentInfo.original_name
        }, {
          caption: `üìÅ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${documentInfo.original_name}
‚Ä¢ –†–∞–∑–º–µ—Ä: ${formattedSize}
‚Ä¢ –¢–∏–ø: ${documentInfo.type}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${documentInfo.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω: ${new Date(documentInfo.uploaded_at).toLocaleString()}

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –§–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ —á–∞—Å.`,
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", "show_sources")],
            [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
          ])
        });
        
        console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç "${documentInfo.original_name}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        setTimeout(() => {
          cleanupTempFiles();
        }, 1000);
        
      } catch (sendError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', sendError);
        
        const msg = await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞

–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª "${filename}".

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é
‚Ä¢ –û—à–∏–±–∫–∞ Telegram API`, {
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
          ])
        });
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
      }
      
    } catch (error) {
      console.error("Error in download handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.action("my_favorites", async (ctx) => {
    try {
      await deleteLastBotMessages(ctx);
      await ctx.answerCbQuery();
      const userId = ctx.from?.id;
      if (!userId) return;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userAnalytics = await getUserAnalytics(userId);
      if (!userAnalytics || !userAnalytics.favoriteQueries || userAnalytics.favoriteQueries.length === 0) {
        const msg = await ctx.reply(`‚≠ê *–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

*–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:*
‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
‚Ä¢ –í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–¥–µ—Å—å`, {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", "search_history")]
          ])
        });
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
        return;
      }

      const favoritesText = userAnalytics.favoriteQueries.map((query: string, i: number) => 
        `${i + 1}. "${query}"`
      ).join('\n');

      const msg = await ctx.reply(`‚≠ê *–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ*

*–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:*
${favoritesText}

*–ß—Ç–æ –¥–∞–ª—å—à–µ?*
‚Ä¢ –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–æ–º–æ—â–∏`, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
          [Markup.button.callback("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", "search_history")],
          [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
        ])
      });
      
      // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
    } catch (error) {
      console.error("Error in my_favorites handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
  bot.action("search_history", async (ctx) => {
    try {
      await deleteLastBotMessages(ctx);
      await ctx.answerCbQuery();
      const userId = ctx.from?.id;
      if (!userId) return;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const history = await getUserSearchHistory(userId, 10);
      if (!history || history.length === 0) {
        const msg = await ctx.reply(`üìã *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.

*–ö–∞–∫ –ø–æ—è–≤–∏—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è:*
‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç
‚Ä¢ –í–∞—à–∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–¥–µ—Å—å`, {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("‚≠ê –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ", "my_favorites")]
          ])
        });
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
        return;
      }

      const historyText = history.map((item, i) => 
        `${i + 1}. "${item.query}" (${item.resultsCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, ${item.searchType})`
      ).join('\n');

      const msg = await ctx.reply(`üìã *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞*

*–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:*
${historyText}

*–ß—Ç–æ –¥–∞–ª—å—à–µ?*
‚Ä¢ –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–æ–º–æ—â–∏`, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
          [Markup.button.callback("‚≠ê –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ", "my_favorites")],
          [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
        ])
      });
      
      // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
    } catch (error) {
      console.error("Error in search_history handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.action("popular_queries", async (ctx) => {
    try {
      await deleteLastBotMessages(ctx);
      await ctx.answerCbQuery();
      const userId = ctx.from?.id;
      if (!userId) return;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const popular = await getPopularQueries(10);
      if (!popular || popular.length === 0) {
        const msg = await ctx.reply(`üìä *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã*

–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.

*–ö–∞–∫ –ø–æ—è–≤—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ:*
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
‚Ä¢ –ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã`, {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", "search_history")]
          ])
        });
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
        return;
      }

      const popularText = popular.map((item, i) => 
        `${i + 1}. "${item.query}" (${item.count} —Ä–∞–∑)`
      ).join('\n');

      const msg = await ctx.reply(`üìä *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã*

*–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*
${popularText}

*–ß—Ç–æ –¥–∞–ª—å—à–µ?*
‚Ä¢ –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–æ–º–æ—â–∏`, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
          [Markup.button.callback("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", "search_history")],
          [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
        ])
      });
      
      // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ lastBotMessages
    } catch (error) {
      console.error("Error in popular_queries handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });

  bot.launch();
  console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
  scheduleCleanup();
  console.log("üßπ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ (–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)");
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
  process.once('SIGINT', () => {
    console.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...");
    bot.stop('SIGINT');
  });
  
  process.once('SIGTERM', () => {
    console.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...");
    bot.stop('SIGTERM');
  });
}