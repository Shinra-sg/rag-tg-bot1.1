import { Telegraf, Context, Markup } from "telegraf";
import { searchInstructions } from "../utils/search";
import { searchInstructionsWithAccess, hasAnyAccess } from "../utils/searchWithAccess";
import { askLLM } from "../utils/generateAnswer";
import { formatSearchResults, formatSummary } from "../utils/formatSources";
import { formatSearchResultsPlain, formatSummaryPlain } from "../utils/formatSourcesPlain";

export function startBot() {
  const token = process.env.BOT_TOKEN;
  if (!token) throw new Error("BOT_TOKEN is not defined in .env");

  const bot = new Telegraf(token);
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userSearchResults = new Map<number, any[]>();
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const lastBotMessages = new Map<number, number[]>();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
  function logAction(action: string, userId?: number, details?: any) {
    console.log(`[${new Date().toISOString()}] Action: ${action}, User: ${userId}, Details:`, details);
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
  async function deleteLastBotMessages(ctx: Context) {
    const userId = ctx.from?.id;
    if (userId && lastBotMessages.has(userId)) {
      const messagesToDelete = lastBotMessages.get(userId)!;
      console.log(`[${new Date().toISOString()}] Deleting ${messagesToDelete.length} messages for user ${userId}`);
      
      for (const msgId of messagesToDelete) {
        try {
          await ctx.telegram.deleteMessage(ctx.chat!.id, msgId);
          console.log(`[${new Date().toISOString()}] Successfully deleted message ${msgId} for user ${userId}`);
        } catch (e) {
          console.log(`[${new Date().toISOString()}] Failed to delete message ${msgId} for user ${userId}:`, e);
        }
      }
      lastBotMessages.delete(userId);
    }
  }

  bot.start(async (ctx: Context) => {
    await deleteLastBotMessages(ctx);
    const welcomeMessage = `üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–ø–æ–º–æ—â–Ω–∏–∫!*

–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üîç –ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ üìÑ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Ü–∏—Ç–∞—Ç—ã
‚Ä¢ üìÅ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /about ‚Äî –æ –ø—Ä–æ–µ–∫—Ç–µ`;

    const msg = await ctx.reply(welcomeMessage, {
      parse_mode: 'Markdown',
      ...Markup.keyboard([
        ["üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ"]
      ]).resize()
    });
    const userId = ctx.from?.id;
    if (userId) {
      lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.hears("–ü–æ–º–æ—â—å", async (ctx: Context) => {
    await deleteLastBotMessages(ctx);
    const helpMessage = `‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞*

*–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:*
1. –ù–∞–∂–º–∏—Ç–µ "üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
2. –Ø –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN?"
‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ"
‚Ä¢ "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–ø—É—Å–∫–∞"
‚Ä¢ "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üìÑ "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏" ‚Äî –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
‚Ä¢ üìÅ "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª" ‚Äî –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
‚Ä¢ üîÑ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" ‚Äî –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫

*–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç:*
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.`;

    const msg = await ctx.reply(helpMessage, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
        [Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
      ])
    });
    const userId = ctx.from?.id;
    if (userId) {
      lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.hears("–û –ø—Ä–æ–µ–∫—Ç–µ", async (ctx: Context) => {
    await deleteLastBotMessages(ctx);
    const aboutMessage = `ü§ñ *–û –ø—Ä–æ–µ–∫—Ç–µ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞*

*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:*
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

*–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
‚Ä¢ üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (RAG)
‚Ä¢ ü§ñ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ò–ò (Ollama)
‚Ä¢ üìä PostgreSQL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º pgvector
‚Ä¢ üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF –∏ Markdown

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º
‚Ä¢ –†–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º

*–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:*
–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;

    const msg = await ctx.reply(aboutMessage, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
        [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
      ])
    });
    const userId = ctx.from?.id;
    if (userId) {
      lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.hears("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", async (ctx: Context) => {
    await deleteLastBotMessages(ctx);
    const askMessage = `üîç *–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å*

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã?"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞?"
‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏"
‚Ä¢ "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ"

*–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

*–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É!* üöÄ`;

    const msg = await ctx.reply(askMessage, {
      parse_mode: 'Markdown',
      ...Markup.removeKeyboard()
    });
    const userId = ctx.from?.id;
    if (userId) {
      lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.command("help", async (ctx: Context) => {
    await deleteLastBotMessages(ctx);
    const msg = await ctx.reply(
      "‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö."
    );
    const userId = ctx.from?.id;
    if (userId) {
      lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.on("text", async (ctx: Context) => {
    const userId = ctx.from?.id;
    const messageText = ctx.message && "text" in ctx.message ? ctx.message.text : "";
    logAction("text_message", userId, { text: messageText.substring(0, 50) + "..." });
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userId) {
      if (lastBotMessages.has(userId)) {
        console.log(`[${new Date().toISOString()}] Deleting previous bot messages for user ${userId} before processing new query`);
        for (const msgId of lastBotMessages.get(userId)!) {
          try {
            await ctx.telegram.deleteMessage(ctx.chat!.id, msgId);
          } catch (e) {
            // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            console.log(`[${new Date().toISOString()}] Message ${msgId} already deleted or not found for user ${userId}`);
          }
        }
        lastBotMessages.delete(userId);
      }
    }

    const msg = ctx.message;
    if (!msg || !("text" in msg)) {
      const errorMsg = await ctx.reply(`‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN?"
‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
‚Ä¢ "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—É—Å–∫–∞"`, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
          [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"), Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
        ])
      });
      if (userId) {
        lastBotMessages.set(userId, [errorMsg.message_id]);
      }
      return;
    }

    const text = msg.text;
    const processingMsg = await ctx.reply(`üîç *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...*

*–ó–∞–ø—Ä–æ—Å:* "${text}"

‚è≥ –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...`, {
      parse_mode: 'Markdown',
      ...Markup.removeKeyboard()
    });
    const processingMsgId = processingMsg.message_id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    const username = ctx.from?.username;
    let results;
    
    if (username) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
      const hasAccess = await hasAnyAccess(username);
      if (!hasAccess) {
        const noAccessMessage = `üîí *–î–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω*

–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.

*–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:*
1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã
2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à username: @${username}
3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω—É–∂–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:*
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "‚ÑπÔ∏è –ü–æ–º–æ—â—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞`;

        await ctx.reply(noAccessMessage, {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")],
            [Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
          ])
        });
        if (userId) {
          lastBotMessages.set(userId, [processingMsgId]);
        }
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
      results = await searchInstructionsWithAccess(text, username);
    } else {
      // –ï—Å–ª–∏ username –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      results = await searchInstructions(text);
    }
    if (results && results.length > 0) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Ollama
      const context = results.map((r, i) => `–§—Ä–∞–≥–º–µ–Ω—Ç #${i+1}: ${r.content}`).join("\n\n");
      const prompt = `–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∫–æ–º–ø–∞–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ —ç—Ç–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö ‚Äî —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ–¥—ë–Ω –Ω–∏–∂–µ.\n\n–§—Ä–∞–≥–º–µ–Ω—Ç—ã:\n${context}\n\n–í–æ–ø—Ä–æ—Å: ${text}\n\n–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:`;
      let answer = "";
      try {
        answer = await askLLM(prompt, "deepseek-r1");
        // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è <think>...</think> –∏–∑ –æ—Ç–≤–µ—Ç–∞
        answer = answer.replace(/<think>[\s\S]*?<\/think>/gi, "").trim();
      } catch (e) {
        answer = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò.";
      }
      const sentMessages: number[] = [processingMsgId];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userId) {
        userSearchResults.set(userId, results);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      let summaryMsg;
      try {
        const summary = formatSummary(results);
        summaryMsg = await ctx.reply(summary, { parse_mode: 'Markdown' });
      } catch (error) {
        console.log("Markdown parsing error in summary, using plain format:", error);
        const summary = formatSummaryPlain(results);
        summaryMsg = await ctx.reply(summary);
      }
      sentMessages.push(summaryMsg.message_id);
      
      const msg1 = await ctx.reply(answer, Markup.inlineKeyboard([
        [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
        [Markup.button.callback("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", "show_sources")],
        [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"), Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")],
        ...results.map((r, i) => [Markup.button.callback(`üìÅ –°–∫–∞—á–∞—Ç—å ${r.filename}`, `download_${encodeURIComponent(r.filename)}`)])
      ]));
      sentMessages.push(msg1.message_id);

      // --- –í–µ—Å—å –∫–æ–¥, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∏ parse_mode, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω ---
      // –ì—É–≥–ª-—Å—Ç–∏–ª—å: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
      function highlightKey(text: string, key: string): string {
        const cleanKey = key.replace(/\n/g, ' ').trim();
        // –ù–µ –≤—ã–¥–µ–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        if (cleanKey.length < 3 || !/[a-zA-Z–∞-—è–ê-–Ø0-9]/.test(cleanKey)) {
          // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è
          return text.replace(/([_\*\[\]()~`>#+\-=|{}.!])/g, '\\$1');
        }
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ * –≤ –∫–ª—é—á–µ
        const safeKey = cleanKey.replace(/([_\[\]()~`>#+\-=|{}.!])/g, '\\$1');
        // –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã–¥–µ–ª—è–µ–º, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        if (text.includes(cleanKey)) {
          return text.replace(cleanKey, `*${safeKey}*`);
        }
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–ª—é—á ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        return text.replace(/([_\*\[\]()~`>#+\-=|{}.!])/g, '\\$1');
      }
      let googleStyleBlocks = await Promise.all(results.map(async (r, i) => {
        const path = require("path");
        const fs = require("fs");
        const filePath = path.join(__dirname, "../data/raw", r.filename);
        if (!fs.existsSync(filePath)) return `**#${i+1}**\n*${r.content.trim().split(/[.!?]/)[0]}*\n\nüìÑ **–ò—Å—Ç–æ—á–Ω–∏–∫:** ${r.filename} (${r.source_ref})`;
        let fullText = "";
        try {
          fullText = fs.readFileSync(filePath, "utf-8");
        } catch {
          return `**#${i+1}**\n*${r.content.trim().split(/[.!?]/)[0]}*\n\nüìÑ **–ò—Å—Ç–æ—á–Ω–∏–∫:** ${r.filename} (${r.source_ref})`;
        }
        const sentences: string[] = fullText.match(/[^.!?\n]+[.!?\n]+/g) || [fullText];
        let idx = sentences.findIndex((s: string) => s.includes(r.content.trim().slice(0, 10)));
        if (idx === -1) return `**#${i+1}**\n*${r.content.trim().split(/[.!?]/)[0]}*\n\nüìÑ **–ò—Å—Ç–æ—á–Ω–∏–∫:** ${r.filename} (${r.source_ref})`;
        const before = idx > 0 ? sentences[idx-1].trim() : "";
        const after = idx < sentences.length-1 ? sentences[idx+1].trim() : "";
        const keyPhrase = r.content.trim().split(/[.!?]/)[0];
        let main = highlightKey(sentences[idx].trim(), keyPhrase);
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
        let contextText = [before, main, after].filter(Boolean).join(" ").trim();
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —á–∞–Ω–∫
        if (!contextText || contextText.length < 10 || /^\W+$/.test(contextText)) {
          contextText = r.content.trim();
          // –ï—Å–ª–∏ –∏ —á–∞–Ω–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π ‚Äî –ø–∏—à–µ–º "_–§—Ä–∞–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_"
          if (!contextText || contextText.length < 5 || /^\W+$/.test(contextText)) {
            contextText = "_–§—Ä–∞–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_";
          }
        }
        return `**#${i+1}**\n${contextText}\n\nüìï **–ò—Å—Ç–æ—á–Ω–∏–∫:** ${r.filename} (${r.source_ref})`;
      }));
      // –ü–æ–ª–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
      // --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
      if (userId) {
        lastBotMessages.set(userId, sentMessages);
      }
    } else {
      const fallbackMsg = await ctx.reply(`üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*

*–ó–∞–ø—Ä–æ—Å:* "${text}"

‚ùå *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.

*–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
‚Ä¢ –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
          [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"), Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
        ])
      });
      if (userId) {
        lastBotMessages.set(userId, [fallbackMsg.message_id]);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ inline keyboard
  bot.action("ask_question", async (ctx) => {
    try {
      logAction("ask_question", ctx.from?.id);
      await deleteLastBotMessages(ctx);
      await ctx.answerCbQuery();
      const askMessage = `üîç *–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å*

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã?"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞?"
‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏"
‚Ä¢ "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ"

*–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

*–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É!* üöÄ`;

      const msg = await ctx.reply(askMessage, {
        parse_mode: 'Markdown',
        ...Markup.removeKeyboard()
      });
      const userId = ctx.from?.id;
      if (userId) {
        lastBotMessages.set(userId, [msg.message_id]);
      }
    } catch (error) {
      console.error("Error in ask_question handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });
  bot.action("help", async (ctx) => {
    try {
      await deleteLastBotMessages(ctx);
      await ctx.answerCbQuery();
      const helpMessage = `‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞*

*–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:*
1. –ù–∞–∂–º–∏—Ç–µ "üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
2. –Ø –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN?"
‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ"
‚Ä¢ "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–ø—É—Å–∫–∞"
‚Ä¢ "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üìÑ "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏" ‚Äî –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
‚Ä¢ üìÅ "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª" ‚Äî –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
‚Ä¢ üîÑ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" ‚Äî –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫

*–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç:*
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.`;

      const msg = await ctx.reply(helpMessage, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
          [Markup.button.callback("ü§ñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
        ])
      });
      const userId = ctx.from?.id;
      if (userId) {
        lastBotMessages.set(userId, [msg.message_id]);
      }
    } catch (error) {
      console.error("Error in help handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });
  bot.action("about", async (ctx) => {
    try {
      await deleteLastBotMessages(ctx);
      await ctx.answerCbQuery();
      const aboutMessage = `ü§ñ *–û –ø—Ä–æ–µ–∫—Ç–µ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞*

*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:*
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

*–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
‚Ä¢ üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (RAG)
‚Ä¢ ü§ñ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ò–ò (Ollama)
‚Ä¢ üìä PostgreSQL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º pgvector
‚Ä¢ üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF –∏ Markdown

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º
‚Ä¢ –†–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º

*–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:*
–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;

      const msg = await ctx.reply(aboutMessage, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
          [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
        ])
      });
      const userId = ctx.from?.id;
      if (userId) {
        lastBotMessages.set(userId, [msg.message_id]);
      }
    } catch (error) {
      console.error("Error in about handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });
  
  bot.action("show_sources", async (ctx) => {
    try {
      logAction("show_sources", ctx.from?.id);
      await ctx.answerCbQuery();
      const userId = ctx.from?.id;
      
      if (userId && userSearchResults.has(userId)) {
        const results = userSearchResults.get(userId)!;
        
        try {
          // –ü—Ä–æ–±—É–µ–º —Å Markdown
          const formattedSources = formatSearchResults(results);
          const sourcesMsg = await ctx.reply(formattedSources, { parse_mode: 'Markdown' });
          if (userId) {
            const arr = lastBotMessages.get(userId) || [];
            arr.push(sourcesMsg.message_id);
            lastBotMessages.set(userId, arr);
          }
        } catch (error) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º plain –≤–µ—Ä—Å–∏—é
          console.log("Markdown parsing error, using plain format:", error);
          const formattedSources = formatSearchResultsPlain(results);
          const sourcesMsg = await ctx.reply(formattedSources);
          if (userId) {
            const arr = lastBotMessages.get(userId) || [];
            arr.push(sourcesMsg.message_id);
            lastBotMessages.set(userId, arr);
          }
        }
      } else {
        const noResultsMsg = `‚ùå *–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*

–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, –∑–∞–¥–∞–≤ –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"`;

        const errorMsg = await ctx.reply(noResultsMsg, {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üîç –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "ask_question")],
            [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
          ])
        });
        if (userId) {
          const arr = lastBotMessages.get(userId) || [];
          arr.push(errorMsg.message_id);
          lastBotMessages.set(userId, arr);
        }
      }
    } catch (error) {
      console.error("Error in show_sources handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const path = require("path");
  const fs = require("fs");
  bot.action(/download_(.+)/, async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const filename = decodeURIComponent(ctx.match[1]);
      const filePath = path.join(__dirname, "../data/raw", filename);
      const userId = ctx.from?.id;
      
      if (fs.existsSync(filePath)) {
        const docMsg = await ctx.replyWithDocument({ source: filePath, filename });
        if (userId) {
          const arr = lastBotMessages.get(userId) || [];
          arr.push(docMsg.message_id);
          lastBotMessages.set(userId, arr);
        }
      } else {
        const errMsg = await ctx.reply(`‚ùå *–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω*

–§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.

*–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
‚Ä¢ –§–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω
‚Ä¢ –û—à–∏–±–∫–∞ –≤ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
‚Ä¢ –§–∞–π–ª –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞`);
        if (userId) {
          const arr = lastBotMessages.get(userId) || [];
          arr.push(errMsg.message_id);
          lastBotMessages.set(userId, arr);
        }
      }
    } catch (error) {
      console.error("Error in download handler:", error);
      try {
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞");
      } catch (e) {
        console.error("Failed to answer callback query:", e);
      }
    }
  });

  bot.launch();
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
}