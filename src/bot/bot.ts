import { Telegraf, Context, Markup } from "telegraf";
import { searchInstructions } from "../utils/search";
import { askLLM } from "../utils/generateAnswer";

export function startBot() {
  const token = process.env.BOT_TOKEN;
  if (!token) throw new Error("BOT_TOKEN is not defined in .env");

  const bot = new Telegraf(token);
  // --- –í–µ—Å—å –∫–æ–¥, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω ---
  // const lastBotMessages = new Map<number, number[]>();
  // async function deleteLastBotMessages(ctx: Context) {
  //   const userId = ctx.from?.id;
  //   if (userId && lastBotMessages.has(userId)) {
  //     for (const msgId of lastBotMessages.get(userId)!) {
  //       try {
  //         await ctx.telegram.deleteMessage(ctx.chat!.id, msgId);
  //       } catch (e) {}
  //     }
  //     lastBotMessages.delete(userId);
  //   }
  // }

  bot.start(async (ctx: Context) => {
    // await deleteLastBotMessages(ctx);
    const msg = await ctx.reply(
      "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.",
      Markup.keyboard([
        ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
        ["–ü–æ–º–æ—â—å", "–û –ø—Ä–æ–µ–∫—Ç–µ"]
      ]).resize()
    );
    const userId = ctx.from?.id;
    if (userId) {
      // lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.hears("–ü–æ–º–æ—â—å", async (ctx: Context) => {
    // await deleteLastBotMessages(ctx);
    const msg = await ctx.reply(
      "‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
    const userId = ctx.from?.id;
    if (userId) {
      // lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.hears("–û –ø—Ä–æ–µ–∫—Ç–µ", async (ctx: Context) => {
    // await deleteLastBotMessages(ctx);
    const msg = await ctx.reply(
      "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ PDF –∏ Markdown-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò."
    );
    const userId = ctx.from?.id;
    if (userId) {
      // lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.hears("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", async (ctx: Context) => {
    // await deleteLastBotMessages(ctx);
    const msg = await ctx.reply(
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
    );
    const userId = ctx.from?.id;
    if (userId) {
      // lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.command("help", async (ctx: Context) => {
    // await deleteLastBotMessages(ctx);
    const msg = await ctx.reply(
      "‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö."
    );
    const userId = ctx.from?.id;
    if (userId) {
      // lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  bot.on("text", async (ctx: Context) => {
    const userId = ctx.from?.id;
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userId) {
      // if (lastBotMessages.has(userId)) {
      //   for (const msgId of lastBotMessages.get(userId)!) {
      //     try {
      //       await ctx.telegram.deleteMessage(ctx.chat!.id, msgId);
      //     } catch (e) {
      //       // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      //     }
      //   }
      //   lastBotMessages.delete(userId);
      // }
    }

    const msg = ctx.message;
    if (!msg || !("text" in msg)) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", Markup.inlineKeyboard([
        [Markup.button.callback("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
        [Markup.button.callback("–ü–æ–º–æ—â—å", "help"), Markup.button.callback("–û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
      ]));
      return;
    }

    const text = msg.text;
    await ctx.reply(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: "${text}"`, Markup.removeKeyboard());

    const results = await searchInstructions(text);
    if (results && results.length > 0) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Ollama
      const context = results.map((r, i) => `–§—Ä–∞–≥–º–µ–Ω—Ç #${i+1}: ${r.content}`).join("\n\n");
      const prompt = `–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∫–æ–º–ø–∞–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ —ç—Ç–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö ‚Äî —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ–¥—ë–Ω –Ω–∏–∂–µ.\n\n–§—Ä–∞–≥–º–µ–Ω—Ç—ã:\n${context}\n\n–í–æ–ø—Ä–æ—Å: ${text}\n\n–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:`;
      let answer = "";
      try {
        answer = await askLLM(prompt, "deepseek-r1");
        // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è <think>...</think> –∏–∑ –æ—Ç–≤–µ—Ç–∞
        answer = answer.replace(/<think>[\s\S]*?<\/think>/gi, "").trim();
      } catch (e) {
        answer = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò.";
      }
      const sentMessages: number[] = [];
      const msg1 = await ctx.reply(answer, Markup.inlineKeyboard([
        [Markup.button.callback("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
        [Markup.button.callback("–ü–æ–º–æ—â—å", "help"), Markup.button.callback("–û –ø—Ä–æ–µ–∫—Ç–µ", "about")],
        ...results.map((r, i) => [Markup.button.callback(`–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª #${i+1}`, `download_${encodeURIComponent(r.filename)}`)])
      ]));
      sentMessages.push(msg1.message_id);

      // --- –í–µ—Å—å –∫–æ–¥, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∏ parse_mode, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω ---
      // –ì—É–≥–ª-—Å—Ç–∏–ª—å: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
      function highlightKey(text: string, key: string): string {
        const cleanKey = key.replace(/\n/g, ' ').trim();
        // –ù–µ –≤—ã–¥–µ–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        if (cleanKey.length < 3 || !/[a-zA-Z–∞-—è–ê-–Ø0-9]/.test(cleanKey)) {
          // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è
          return text.replace(/([_\*\[\]()~`>#+\-=|{}.!])/g, '\\$1');
        }
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ * –≤ –∫–ª—é—á–µ
        const safeKey = cleanKey.replace(/([_\[\]()~`>#+\-=|{}.!])/g, '\\$1');
        // –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã–¥–µ–ª—è–µ–º, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        if (text.includes(cleanKey)) {
          return text.replace(cleanKey, `*${safeKey}*`);
        }
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–ª—é—á ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        return text.replace(/([_\*\[\]()~`>#+\-=|{}.!])/g, '\\$1');
      }
      let googleStyleBlocks = await Promise.all(results.map(async (r, i) => {
        const path = require("path");
        const fs = require("fs");
        const filePath = path.join(__dirname, "../data/raw", r.filename);
        if (!fs.existsSync(filePath)) return `#${i+1}\n*${r.content.trim().split(/[.!?]/)[0]}*\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${r.filename} (${r.source_ref})`;
        let fullText = "";
        try {
          fullText = fs.readFileSync(filePath, "utf-8");
        } catch {
          return `#${i+1}\n*${r.content.trim().split(/[.!?]/)[0]}*\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${r.filename} (${r.source_ref})`;
        }
        const sentences: string[] = fullText.match(/[^.!?\n]+[.!?\n]+/g) || [fullText];
        let idx = sentences.findIndex((s: string) => s.includes(r.content.trim().slice(0, 10)));
        if (idx === -1) return `#${i+1}\n*${r.content.trim().split(/[.!?]/)[0]}*\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${r.filename} (${r.source_ref})`;
        const before = idx > 0 ? sentences[idx-1].trim() : "";
        const after = idx < sentences.length-1 ? sentences[idx+1].trim() : "";
        const keyPhrase = r.content.trim().split(/[.!?]/)[0];
        let main = highlightKey(sentences[idx].trim(), keyPhrase);
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
        let contextText = [before, main, after].filter(Boolean).join(" ").trim();
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —á–∞–Ω–∫
        if (!contextText || contextText.length < 10 || /^\W+$/.test(contextText)) {
          contextText = r.content.trim();
          // –ï—Å–ª–∏ –∏ —á–∞–Ω–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π ‚Äî –ø–∏—à–µ–º "_–§—Ä–∞–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_"
          if (!contextText || contextText.length < 5 || /^\W+$/.test(contextText)) {
            contextText = "_–§—Ä–∞–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω_";
          }
        }
        return `#${i+1}\n${contextText}\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${r.filename} (${r.source_ref})`;
      }));
      const reply = results.map((r, i) =>
        `#${i+1}\n${r.content}\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${r.filename} (${r.source_ref})`
      ).join("\n\n");
      await ctx.reply(reply); // –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ Markdown
      // --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
      if (userId) {
        // lastBotMessages.set(userId, sentMessages);
      }
    } else {
      await ctx.reply("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. [fallback]", Markup.inlineKeyboard([
        [Markup.button.callback("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")],
        [Markup.button.callback("–ü–æ–º–æ—â—å", "help"), Markup.button.callback("–û –ø—Ä–æ–µ–∫—Ç–µ", "about")]
      ]));
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ inline keyboard
  bot.action("ask_question", async (ctx) => {
    // await deleteLastBotMessages(ctx);
    await ctx.answerCbQuery();
    const msg = await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.", Markup.removeKeyboard());
    const userId = ctx.from?.id;
    if (userId) {
      // lastBotMessages.set(userId, [msg.message_id]);
    }
  });
  bot.action("help", async (ctx) => {
    // await deleteLastBotMessages(ctx);
    await ctx.answerCbQuery();
    const msg = await ctx.reply("‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö.");
    const userId = ctx.from?.id;
    if (userId) {
      // lastBotMessages.set(userId, [msg.message_id]);
    }
  });
  bot.action("about", async (ctx) => {
    // await deleteLastBotMessages(ctx);
    await ctx.answerCbQuery();
    const msg = await ctx.reply("ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ PDF –∏ Markdown-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò.");
    const userId = ctx.from?.id;
    if (userId) {
      // lastBotMessages.set(userId, [msg.message_id]);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const path = require("path");
  const fs = require("fs");
  bot.action(/download_(.+)/, async (ctx) => {
    await ctx.answerCbQuery();
    const filename = decodeURIComponent(ctx.match[1]);
    const filePath = path.join(__dirname, "../data/raw", filename);
    const userId = ctx.from?.id;
    if (fs.existsSync(filePath)) {
      const docMsg = await ctx.replyWithDocument({ source: filePath, filename });
      if (userId) {
        // const arr = lastBotMessages.get(userId) || [];
        // arr.push(docMsg.message_id);
        // lastBotMessages.set(userId, arr);
      }
    } else {
      const errMsg = await ctx.reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
      if (userId) {
        // const arr = lastBotMessages.get(userId) || [];
        // arr.push(errMsg.message_id);
        // lastBotMessages.set(userId, arr);
      }
    }
  });

  bot.launch();
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
}