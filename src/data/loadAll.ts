import path from "path";
import fs from "fs";
import { parseDocument, getSupportedFormats, isSupportedFormat } from "../utils/documentParsers";
import pool from "../utils/db";

process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err, err && err.stack);
});
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection:', reason);
});

console.log("üöÄ –°—Ç–∞—Ä—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...");

const RAW_DIR = path.join(__dirname, "raw");
const PARSED_DIR = path.join(__dirname, "parsed");

function splitTextToChunks(text: string, chunkSize = 400, overlap = 50): string[] {
  const chunks: string[] = [];
  let start = 0;
  while (start < text.length) {
    const end = Math.min(start + chunkSize, text.length);
    chunks.push(text.slice(start, end));
    start += chunkSize - overlap;
  }
  return chunks;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—Å—Ç—å
if (!fs.existsSync(PARSED_DIR)) {
  fs.mkdirSync(PARSED_DIR);
}

async function parseDocuments() {
  try {
    const files = fs.readdirSync(RAW_DIR);
    console.log("üìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:", files);

    for (const file of files) {
      const fullPath = path.join(RAW_DIR, file);
      const ext = path.extname(file).toLowerCase();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç
      if (!isSupportedFormat(fullPath)) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: ${file} (${ext})`);
        continue;
      }

      try {
        console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: ${file} (${ext})`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        const parsedDoc = await parseDocument(fullPath);
        const text = parsedDoc.content;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        let type = ext.slice(1); // —É–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É
        if (ext === '.md') type = 'markdown';
        if (ext === '.txt') type = 'text';
        if (['.xlsx', '.xls'].includes(ext)) type = 'excel';
        if (['.docx', '.doc'].includes(ext)) type = 'word';
        if (['.pptx', '.ppt'].includes(ext)) type = 'powerpoint';

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        const chunks = splitTextToChunks(text, 400, 50);
        console.log(`üìä –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞–Ω–∫–æ–≤`);
        
        for (let i = 0; i < chunks.length; i++) {
          const chunk = chunks[i];
          let sourceRef = '';
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º source_ref –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
          switch (type) {
            case 'markdown':
              sourceRef = `–∞–±–∑–∞—Ü ${i + 1}`;
              break;
            case 'excel':
              sourceRef = `–ª–∏—Å—Ç ${i + 1}`;
              break;
            case 'word':
              sourceRef = `—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${i + 1}`;
              break;
            case 'powerpoint':
              sourceRef = `—Å–ª–∞–π–¥ ${i + 1}`;
              break;
            case 'pdf':
              sourceRef = `—Å—Ç—Ä. ${i + 1}`;
              break;
            default:
              sourceRef = `—á–∞—Å—Ç—å ${i + 1}`;
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
          await pool.query(
            "INSERT INTO instruction_chunks (filename, chunk_index, content, type, source_ref) VALUES ($1, $2, $3, $4, $5)",
            [file, i, chunk, type, sourceRef]
          );
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const outPath = path.join(PARSED_DIR, `${file}.txt`);
        fs.writeFileSync(outPath, text);
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: ${outPath}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (parsedDoc.metadata) {
          console.log(`üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, {
            title: parsedDoc.metadata.title,
            author: parsedDoc.metadata.author,
            pages: parsedDoc.metadata.pages,
            created: parsedDoc.metadata.created,
            modified: parsedDoc.metadata.modified
          });
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error);
        if (error instanceof Error && error.stack) {
          console.error(error.stack);
        }
      }
    }
    
    console.log("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω");
  } catch (err) {
    console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", err);
    if (err instanceof Error && err.stack) {
      console.error(err.stack);
    }
  }
}

parseDocuments();