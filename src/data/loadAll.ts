import path from "path";
import fs from "fs";
import { parsePDF } from "./pdfParser";
import { parseMarkdown } from "./mdParser";
import pool from "../utils/db";

process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err, err && err.stack);
});
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection:', reason);
});

console.log("üöÄ –°—Ç–∞—Ä—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...");

const RAW_DIR = path.join(__dirname, "raw");
const PARSED_DIR = path.join(__dirname, "parsed");

function splitTextToChunks(text: string, chunkSize = 400, overlap = 50): string[] {
  const chunks: string[] = [];
  let start = 0;
  while (start < text.length) {
    const end = Math.min(start + chunkSize, text.length);
    chunks.push(text.slice(start, end));
    start += chunkSize - overlap;
  }
  return chunks;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—Å—Ç—å
if (!fs.existsSync(PARSED_DIR)) {
  fs.mkdirSync(PARSED_DIR);
}

async function parseDocuments() {
  try {
    const files = fs.readdirSync(RAW_DIR);
    console.log("üìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:", files);

    for (const file of files) {
      const ext = path.extname(file).toLowerCase();
      const fullPath = path.join(RAW_DIR, file);
      let text = "";
      let type = "";
      let sourceRefs: string[] = [];

      try {
        if (ext === ".pdf") {
          console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF: ${file}`);
          text = await parsePDF(fullPath);
          type = "pdf";
          // –î–ª—è PDF source_ref –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ç–∫–∞, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ
        } else if (ext === ".md") {
          console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Markdown: ${file}`);
          const lines = await parseMarkdown(fullPath);
          text = lines.join("\n");
          type = "md";
        } else {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª: ${file}`);
          continue;
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        const chunks = splitTextToChunks(text, 400, 50);
        for (let i = 0; i < chunks.length; i++) {
          const chunk = chunks[i];
          const source_ref = type === "md" ? `–∞–±–∑–∞—Ü ${i + 1}` : `—Å—Ç—Ä. ${i + 1}`;
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
          await pool.query(
            "INSERT INTO instruction_chunks (filename, chunk_index, content, type, source_ref) VALUES ($1, $2, $3, $4, $5)",
            [file, i, chunk, type, source_ref]
          );
        }

        // –°—Ç–∞—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        const outPath = path.join(PARSED_DIR, `${file}.txt`);
        fs.writeFileSync(outPath, text);
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: ${outPath}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error);
        if (error instanceof Error && error.stack) {
          console.error(error.stack);
        }
      }
    }
  } catch (err) {
    console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", err);
    if (err instanceof Error && err.stack) {
      console.error(err.stack);
    }
  }
}

parseDocuments();