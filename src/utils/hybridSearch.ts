import pool from "./db";
import { execSync } from "child_process";

interface SearchResult {
  content: string;
  filename: string;
  source_ref: string;
  score: number;
  search_type: 'vector' | 'keyword' | 'hybrid';
}

interface HybridSearchOptions {
  vectorWeight?: number;
  keywordWeight?: number;
  maxResults?: number;
  minScore?: number;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Python-—Å–∫—Ä–∏–ø—Ç
 */
function getQueryEmbedding(text: string): number[] {
  const safeText = text.replace(/"/g, '\\"');
  const output = execSync(`python3 get_query_embedding.py "${safeText}"`).toString();
  return output.trim().split(',').map(Number);
}

/**
 * –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
 */
async function vectorSearch(query: string, limit: number = 20): Promise<SearchResult[]> {
  try {
    const embedding = getQueryEmbedding(query);
    const res = await pool.query(
      `SELECT *, embedding <#> $1 AS distance
       FROM instruction_chunks
       WHERE embedding IS NOT NULL
       ORDER BY distance ASC
       LIMIT $2;`,
      [JSON.stringify(embedding), limit]
    );

    return res.rows.map((row: any) => ({
      content: row.content,
      filename: row.filename,
      source_ref: row.source_ref,
      score: 1 / (1 + row.distance), // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–∫–æ—Ä (0-1)
      search_type: 'vector' as const
    }));
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:", e);
    return [];
  }
}

/**
 * –ö–ª—é—á–µ–≤–æ–π –ø–æ–∏—Å–∫ (ILIKE)
 */
async function keywordSearch(query: string, limit: number = 20): Promise<SearchResult[]> {
  try {
    // –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const keywords = query.toLowerCase().split(/\s+/).filter(k => k.length > 2);
    
    if (keywords.length === 0) {
      return [];
    }

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const conditions = keywords.map((_, i) => `content ILIKE $${i + 1}`).join(' AND ');
    const values = keywords.map(k => `%${k}%`);

    const res = await pool.query(
      `SELECT *, 
              (LENGTH(content) - LENGTH(REPLACE(LOWER(content), $1, ''))) / LENGTH($1) as keyword_count
       FROM instruction_chunks 
       WHERE ${conditions}
       ORDER BY keyword_count DESC, LENGTH(content) ASC
       LIMIT $${keywords.length + 1};`,
      [...values, limit]
    );

    return res.rows.map((row: any) => ({
      content: row.content,
      filename: row.filename,
      source_ref: row.source_ref,
      score: Math.min(1, row.keyword_count / keywords.length), // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∫–æ—Ä
      search_type: 'keyword' as const
    }));
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:", e);
    return [];
  }
}

/**
 * –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏ –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export async function hybridSearch(
  query: string, 
  options: HybridSearchOptions = {}
): Promise<SearchResult[]> {
  const {
    vectorWeight = 0.7,
    keywordWeight = 0.3,
    maxResults = 3,
    minScore = 0.1
  } = options;

  console.log(`üîç –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫: "${query}" (–≤–µ—Å–∞: –≤–µ–∫—Ç–æ—Ä=${vectorWeight}, –∫–ª—é—á–∏=${keywordWeight})`);

  // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  const [vectorResults, keywordResults] = await Promise.all([
    vectorSearch(query, maxResults * 3),
    keywordSearch(query, maxResults * 3)
  ]);

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const combinedResults = new Map<string, SearchResult>();

  // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  for (const result of vectorResults) {
    const key = `${result.filename}:${result.source_ref}`;
    if (!combinedResults.has(key)) {
      result.score *= vectorWeight;
      combinedResults.set(key, result);
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  for (const result of keywordResults) {
    const key = `${result.filename}:${result.source_ref}`;
    if (combinedResults.has(key)) {
      // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –µ—Å—Ç—å, –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∫–æ—Ä–∏
      const existing = combinedResults.get(key)!;
      existing.score = existing.score * vectorWeight + result.score * keywordWeight;
      existing.search_type = 'hybrid';
    } else {
      result.score *= keywordWeight;
      combinedResults.set(key, result);
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const sortedResults = Array.from(combinedResults.values())
    .filter(result => result.score >= minScore)
    .sort((a, b) => b.score - a.score)
    .slice(0, maxResults);

  console.log(`‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ ${sortedResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
  
  return sortedResults;
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 */
export async function smartSearch(query: string): Promise<SearchResult[]> {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
  const isSpecificQuery = query.length > 20 || query.includes('?') || query.includes('–∫–∞–∫') || query.includes('—á—Ç–æ');
  
  if (isSpecificQuery) {
    // –î–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
    return hybridSearch(query, { vectorWeight: 0.6, keywordWeight: 0.4 });
  } else {
    // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–µ–≤–æ–π –ø–æ–∏—Å–∫
    const keywordResults = await keywordSearch(query, 3);
    if (keywordResults.length > 0) {
      return keywordResults;
    }
    // –ï—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π
    return vectorSearch(query, 3);
  }
}

/**
 * –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export async function searchWithFilters(
  query: string, 
  filters: {
    categories?: string[];
    fileTypes?: string[];
    dateFrom?: Date;
    dateTo?: Date;
  } = {}
): Promise<SearchResult[]> {
  const { categories, fileTypes, dateFrom, dateTo } = filters;
  
  // –ë–∞–∑–æ–≤—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
  const results = await hybridSearch(query, { maxResults: 20 });
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
  let filteredResults = results;
  
  if (fileTypes && fileTypes.length > 0) {
    filteredResults = filteredResults.filter(result => 
      fileTypes.some(type => result.filename.toLowerCase().endsWith(type.toLowerCase()))
    );
  }
  
  // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –¥–∞—Ç–∞–º –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î
  
  return filteredResults.slice(0, 3);
} 