import { checkSystemHealth } from "./initialize";
import { getDatabaseStats } from "./cleanup";
import { getSearchAnalytics } from "./analytics";

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É
 */
export async function testSystem(): Promise<{
  success: boolean;
  results: {
    health: any;
    database: any;
    analytics: any;
  };
  issues: string[];
}> {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...");
  
  const issues: string[] = [];
  const results: {
    health: any;
    database: any;
    analytics: any;
  } = {
    health: null,
    database: null,
    analytics: null
  };

  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...");
    try {
      results.health = await checkSystemHealth();
      if (results.health && !results.health.healthy) {
        results.health.issues.forEach((issue: string) => issues.push(`Health: ${issue}`));
      }
      console.log("‚úÖ –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω");
    } catch (error) {
      issues.push(`Health: ${error}`);
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:", error);
    }

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    try {
      results.database = await getDatabaseStats();
      if (results.database && results.database.searchLogs === 0 && results.database.userHistory === 0) {
        issues.push("Database: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏");
      }
      console.log("‚úÖ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω");
    } catch (error) {
      issues.push(`Database: ${error}`);
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    console.log("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...");
    try {
      results.analytics = await getSearchAnalytics(7);
      if (results.analytics && results.analytics.totalSearches === 0) {
        issues.push("Analytics: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π");
      }
      console.log("‚úÖ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω");
    } catch (error) {
      issues.push(`Analytics: ${error}`);
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", error);
    }

    const success = issues.length === 0;
    
    if (success) {
      console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    } else {
      console.warn("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:");
      issues.forEach(issue => console.warn(`  - ${issue}`));
    }

    return {
      success,
      results,
      issues
    };

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã:", error);
    issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    
    return {
      success: false,
      results: {
        health: null,
        database: null,
        analytics: null
      },
      issues
    };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã
 */
export async function testComponent(component: 'health' | 'database' | 'analytics' | 'all'): Promise<{
  success: boolean;
  result: any;
  issues: string[];
}> {
  console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component}`);
  
  const issues: string[] = [];
  let result: any = {};

  try {
    switch (component) {
      case 'health':
        result = await checkSystemHealth();
        if (!result.healthy) {
          result.issues.forEach((issue: string) => issues.push(issue));
        }
        break;
        
      case 'database':
        result = await getDatabaseStats();
        if (result.searchLogs === 0 && result.userHistory === 0) {
          issues.push("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏");
        }
        break;
        
      case 'analytics':
        result = await getSearchAnalytics(7);
        if (result.totalSearches === 0) {
          issues.push("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π");
        }
        break;
        
      case 'all':
        const allResults = await testSystem();
        return {
          success: allResults.success,
          result: allResults.results,
          issues: allResults.issues
        };
    }

    const success = issues.length === 0;
    
    if (success) {
      console.log(`‚úÖ –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${component} –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
    } else {
      console.warn(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ ${component}:`);
      issues.forEach(issue => console.warn(`  - ${issue}`));
    }

    return {
      success,
      result,
      issues
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${component}:`, error);
    issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    
    return {
      success: false,
      result: null,
      issues
    };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testSystem().then((result) => {
    if (result.success) {
      console.log("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
      process.exit(0);
    } else {
      console.log("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:");
      result.issues.forEach(issue => console.log(`  - ${issue}`));
      process.exit(1);
    }
  }).catch((error) => {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
    process.exit(1);
  });
}

export default testSystem;