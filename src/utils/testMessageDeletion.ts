import { Telegraf, Context } from "telegraf";

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
export function testMessageDeletion() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...");
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)
  const testBot = new Telegraf("test_token");
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const lastBotMessages = new Map<number, number[]>();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
  async function deleteLastBotMessages(ctx: Context) {
    const userId = ctx.from?.id;
    if (userId && lastBotMessages.has(userId)) {
      const messagesToDelete = lastBotMessages.get(userId)!;
      console.log(`‚úÖ –¢–µ—Å—Ç: –£–¥–∞–ª–µ–Ω–∏–µ ${messagesToDelete.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      for (const msgId of messagesToDelete) {
        try {
          // –í —Ç–µ—Å—Ç–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
          console.log(`‚úÖ –¢–µ—Å—Ç: –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        } catch (e) {
          console.log(`‚ùå –¢–µ—Å—Ç: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${msgId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, e);
        }
      }
      lastBotMessages.delete(userId);
    }
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  function testMessageSaving() {
    console.log("\nüìù –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π:");
    
    const testUserId = 12345;
    const testMessageIds = [1001, 1002, 1003];
    
    lastBotMessages.set(testUserId, testMessageIds);
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${testMessageIds.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId}`);
    
    const savedMessages = lastBotMessages.get(testUserId);
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedMessages?.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    return testUserId;
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  async function testMessageDeletion(userId: number) {
    console.log("\nüóëÔ∏è –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:");
    
    const mockContext = {
      from: { id: userId },
      chat: { id: 67890 },
      telegram: {
        deleteMessage: async (chatId: number, messageId: number) => {
          console.log(`‚úÖ –¢–µ—Å—Ç: –í—ã–∑–æ–≤ deleteMessage(${chatId}, ${messageId})`);
          return true;
        }
      }
    } as any;
    
    await deleteLastBotMessages(mockContext);
    
    const remainingMessages = lastBotMessages.get(userId);
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Å—Ç–∞–ª–æ—Å—å ${remainingMessages?.length || 0} —Å–æ–æ–±—â–µ–Ω–∏–π`);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  async function runTests() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...\n");
    
    const userId = testMessageSaving();
    await testMessageDeletion(userId);
    
    console.log("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    console.log("üìã –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ.");
  }
  
  return runTests;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const testRunner = testMessageDeletion();
  testRunner().catch(console.error);
} 