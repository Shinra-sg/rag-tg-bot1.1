import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

export interface OCRResult {
  success: boolean;
  text?: string;
  method?: string;
  error?: string;
  metadata?: {
    image_size?: [number, number];
    image_mode?: string;
    image_format?: string;
    detected_blocks?: number;
    confidence_scores?: number[];
  };
}

export interface ParsedImageDocument {
  content: string;
  metadata: {
    filename: string;
    original_filename: string;
    file_size: number;
    image_size?: [number, number];
    ocr_method: string;
    confidence_score?: number;
    processing_date: string;
  };
}

/**
 * –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è Python OCR —Å–∫—Ä–∏–ø—Ç
 */
export async function extractTextFromImage(imagePath: string): Promise<OCRResult> {
  try {
    console.log(`üîç –ù–∞—á–∏–Ω–∞—é OCR –æ–±—Ä–∞–±–æ—Ç–∫—É: ${imagePath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(imagePath)) {
      return {
        success: false,
        error: `–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imagePath}`
      };
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Python OCR —Å–∫—Ä–∏–ø—Ç
    const result = execSync(`python3 ocr_parser.py "${imagePath}"`, {
      encoding: 'utf8',
      maxBuffer: 10 * 1024 * 1024 // 10MB buffer –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    });
    
    // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const cleanResult = result.trim();
    const jsonStart = cleanResult.indexOf('{');
    const jsonEnd = cleanResult.lastIndexOf('}') + 1;
    
    if (jsonStart === -1 || jsonEnd === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ Python —Å–∫—Ä–∏–ø—Ç–∞');
    }
    
    const jsonString = cleanResult.substring(jsonStart, jsonEnd);
    
    // –ü–∞—Ä—Å–∏–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const ocrResult: OCRResult = JSON.parse(jsonString);
    
    if (ocrResult.success) {
      console.log(`‚úÖ OCR —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –º–µ—Ç–æ–¥–æ–º: ${ocrResult.method}`);
      console.log(`üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${ocrResult.text?.length || 0}`);
    } else {
      console.error(`‚ùå OCR –æ—à–∏–±–∫–∞: ${ocrResult.error}`);
    }
    
    return ocrResult;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–µ:`, error);
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è OCR: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
 */
export async function parseImageDocument(imagePath: string, originalFilename: string): Promise<ParsedImageDocument | null> {
  try {
    console.log(`üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${originalFilename}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const stats = fs.statSync(imagePath);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º OCR
    const ocrResult = await extractTextFromImage(imagePath);
    
    if (!ocrResult.success || !ocrResult.text) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${originalFilename}`);
      return null;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const parsedDocument: ParsedImageDocument = {
      content: ocrResult.text,
      metadata: {
        filename: path.basename(imagePath),
        original_filename: originalFilename,
        file_size: stats.size,
        image_size: ocrResult.metadata?.image_size,
        ocr_method: ocrResult.method || 'unknown',
        confidence_score: ocrResult.metadata?.confidence_scores?.[0] || 0,
        processing_date: new Date().toISOString()
      }
    };
    
    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${originalFilename}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(stats.size / 1024).toFixed(2)} KB`);
    console.log(`üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${ocrResult.text.length}`);
    
    return parsedDocument;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${originalFilename}:`, error);
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function isSupportedImageFormat(filename: string): boolean {
  const supportedFormats = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.webp'];
  const ext = path.extname(filename).toLowerCase();
  return supportedFormats.includes(ext);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export function getSupportedImageFormats(): string[] {
  return ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.webp'];
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export function saveOCRResultToFile(parsedDocument: ParsedImageDocument, outputDir: string): string {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
    const baseName = path.parse(parsedDocument.metadata.original_filename).name;
    const outputPath = path.join(outputDir, `${baseName}_ocr.txt`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    fs.writeFileSync(outputPath, parsedDocument.content, 'utf8');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON —Ñ–∞–π–ª
    const metadataPath = path.join(outputDir, `${baseName}_ocr_metadata.json`);
    fs.writeFileSync(metadataPath, JSON.stringify(parsedDocument.metadata, null, 2), 'utf8');
    
    console.log(`üíæ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
    return outputPath;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:`, error);
    throw error;
  }
}
