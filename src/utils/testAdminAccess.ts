import pool from "./db";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ adminBot.ts
async function testAdminAccess() {
  try {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ isAdminFromDB...\n");

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –∏–∑ admin_ids.json
    console.log("1. –¢–µ—Å—Ç –∞–¥–º–∏–Ω–∞ –∏–∑ admin_ids.json...");
    const adminIds = require("../admin-bot/admin_ids.json");
    const testAdminId = adminIds[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π ID –∏–∑ —Å–ø–∏—Å–∫–∞
    
    const mockCtx1 = {
      from: { id: testAdminId, username: "test_admin_from_json" }
    };
    
    const result1 = await isAdminFromDB(mockCtx1 as any);
    console.log(`   ID ${testAdminId}: ${result1 ? "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω" : "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}`);
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log("\n2. –¢–µ—Å—Ç –∞–¥–º–∏–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    const adminsResult = await pool.query("SELECT username FROM admins LIMIT 1");
    if (adminsResult.rows.length > 0) {
      const testUsername = adminsResult.rows[0].username;
      console.log(`   –ü—Ä–æ–≤–µ—Ä—è–µ–º username: @${testUsername}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∞–¥–º–∏–Ω –µ—Å—Ç—å –≤ –±–∞–∑–µ
      const adminInDb = await isAdminInDB(12345); // –¢–µ—Å—Ç–æ–≤—ã–π ID
      console.log(`   –ê–¥–º–∏–Ω –≤ –ë–î —Å ID 12345: ${adminInDb ? "‚úÖ –ï—Å—Ç—å" : "‚ùå –ù–µ—Ç"}`);
      
      // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é isAdminFromDB
      const mockCtx2 = {
        from: { id: 12345, username: testUsername }
      };
      
      const result2 = await isAdminFromDB(mockCtx2 as any);
      console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç isAdminFromDB: ${result2 ? "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω" : "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}`);
    } else {
      console.log("   ‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("\n3. –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
    const mockCtx3 = {
      from: { id: 999999, username: "non_existent_user" }
    };
    
    const result3 = await isAdminFromDB(mockCtx3 as any);
    console.log(`   –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result3 ? "‚ùå –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)" : "‚úÖ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)"}`);
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ ctx.from
    console.log("\n4. –¢–µ—Å—Ç –±–µ–∑ ctx.from...");
    const mockCtx4 = {
      from: null
    };
    
    const result4 = await isAdminFromDB(mockCtx4 as any);
    console.log(`   –ë–µ–∑ ctx.from: ${result4 ? "‚ùå –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)" : "‚úÖ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)"}`);
    
    console.log("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
  } finally {
    await pool.end();
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –∏–∑ adminBot.ts
async function isAdminInDB(userId: number): Promise<boolean> {
  try {
    const res = await pool.query("SELECT id FROM admins WHERE user_id = $1", [userId]);
    return res.rows.length > 0;
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ –≤ –ë–î:", e);
    return false;
  }
}

async function isAdminFromDB(ctx: any): Promise<boolean> {
  if (!ctx.from) return false;
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const adminIds = require("../admin-bot/admin_ids.json");
  if (adminIds.includes(ctx.from.id)) return true;
  
  // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ë–î
  return await isAdminInDB(ctx.from.id);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testAdminAccess(); 