interface SearchResult {
  content: string;
  filename: string;
  source_ref: string;
}

export function formatSearchResultsPlain(results: SearchResult[]): string {
  if (!results || results.length === 0) {
    return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
  }

  return results.map((result, index) => {
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    const cleanContent = result.content
      .replace(/\n+/g, '\n')  // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
      .replace(/\s+/g, ' ')   // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      .trim();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    const fileExtension = result.filename.split('.').pop()?.toLowerCase();
    let fileIcon = 'üìÑ';
    
    switch (fileExtension) {
      case 'pdf':
        fileIcon = 'üìï';
        break;
      case 'md':
        fileIcon = 'üìù';
        break;
      case 'txt':
        fileIcon = 'üìÑ';
        break;
      case 'doc':
      case 'docx':
        fileIcon = 'üìò';
        break;
      default:
        fileIcon = 'üìÑ';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (–±–µ–∑ Markdown)
    const fragmentNumber = `#${index + 1}`;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –∏–∫–æ–Ω–∫–æ–π (–±–µ–∑ Markdown)
    const sourceInfo = `${fileIcon} –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.filename} (${result.source_ref})`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏
    const separator = index < results.length - 1 ? "\n\n" + "‚îÄ".repeat(50) + "\n\n" : "";
    
    return `${fragmentNumber}\n${cleanContent}\n\n${sourceInfo}${separator}`;
  }).join('');
}

export function formatSummaryPlain(results: SearchResult[]): string {
  if (!results || results.length === 0) {
    return "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
  }
  
  const summary = results.map((result, index) => {
    const fileExtension = result.filename.split('.').pop()?.toLowerCase();
    let fileIcon = 'üìÑ';
    
    switch (fileExtension) {
      case 'pdf':
        fileIcon = 'üìï';
        break;
      case 'md':
        fileIcon = 'üìù';
        break;
      case 'txt':
        fileIcon = 'üìÑ';
        break;
      case 'doc':
      case 'docx':
        fileIcon = 'üìò';
        break;
    }
    
    return `${fileIcon} ${result.filename} (${result.source_ref})`;
  }).join('\n');
  
  return `üìã –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${results.length}\n\n${summary}`;
}

export function formatSingleResultPlain(result: SearchResult, index: number = 0): string {
  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  const cleanContent = result.content
    .replace(/\n+/g, '\n')
    .replace(/\s+/g, ' ')
    .trim();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ñ–∞–π–ª–∞
  const fileExtension = result.filename.split('.').pop()?.toLowerCase();
  let fileIcon = 'üìÑ';
  
  switch (fileExtension) {
    case 'pdf':
      fileIcon = 'üìï';
      break;
    case 'md':
      fileIcon = 'üìù';
      break;
    case 'txt':
      fileIcon = 'üìÑ';
      break;
    case 'doc':
    case 'docx':
      fileIcon = 'üìò';
      break;
  }
  
  return `#${index + 1}\n${cleanContent}\n\n${fileIcon} –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.filename} (${result.source_ref})`;
} 