import pool from "./db";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ adminBot.ts
async function testAdminFunctions() {
  try {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏...\n");

    // –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    console.log("1. –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞...");
    const addResult = await addAdminByUsername("test_admin");
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç:", addResult);
    
    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≥–æ –∂–µ –∞–¥–º–∏–Ω–∞ (–¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)
    console.log("\n2. –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞...");
    const addDuplicateResult = await addAdminByUsername("test_admin");
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç:", addDuplicateResult);
    
    // –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    console.log("\n3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤...");
    const listResult = await listAdmins();
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç:", listResult);
    
    // –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    console.log("\n4. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞...");
    const removeResult = await removeAdminByUsername("test_admin");
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç:", removeResult);
    
    // –¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    console.log("\n5. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞...");
    const removeNonExistentResult = await removeAdminByUsername("non_existent_admin");
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç:", removeNonExistentResult);
    
    // –¢–µ—Å—Ç 6: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    console.log("\n6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤...");
    const finalListResult = await listAdmins();
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç:", finalListResult);
    
    console.log("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
  } finally {
    await pool.end();
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∞–º–∏ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ adminBot.ts)
async function addAdminByUsername(username: string): Promise<{ success: boolean; message: string }> {
  try {
    const cleanUsername = username.startsWith('@') ? username.slice(1) : username;
    if (!cleanUsername) {
      return { success: false, message: "Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
    }

    const existingRes = await pool.query("SELECT id FROM admins WHERE username = $1", [cleanUsername]);
    if (existingRes.rows.length > 0) {
      return { success: false, message: `–ê–¥–º–∏–Ω —Å username @${cleanUsername} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç` };
    }

    await pool.query("INSERT INTO admins (username, user_id) VALUES ($1, $2)", [cleanUsername, null]);
    return { success: true, message: `–ê–¥–º–∏–Ω @${cleanUsername} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω` };
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:", e);
    return { success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞" };
  }
}

async function removeAdminByUsername(username: string): Promise<{ success: boolean; message: string }> {
  try {
    const cleanUsername = username.startsWith('@') ? username.slice(1) : username;
    if (!cleanUsername) {
      return { success: false, message: "Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
    }

    const res = await pool.query("DELETE FROM admins WHERE username = $1 RETURNING id", [cleanUsername]);
    if (res.rows.length === 0) {
      return { success: false, message: `–ê–¥–º–∏–Ω —Å username @${cleanUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω` };
    }

    return { success: true, message: `–ê–¥–º–∏–Ω @${cleanUsername} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω` };
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:", e);
    return { success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞" };
  }
}

async function listAdmins(): Promise<{ success: boolean; admins: any[]; message?: string }> {
  try {
    const res = await pool.query("SELECT username, user_id, created_at FROM admins ORDER BY created_at DESC");
    return { success: true, admins: res.rows };
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤:", e);
    return { success: false, admins: [], message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤" };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testAdminFunctions(); 