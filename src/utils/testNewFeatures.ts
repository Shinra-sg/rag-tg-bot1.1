import { hybridSearch, smartSearch } from '../utils/hybridSearch';
import { getSearchAnalytics, getPopularQueries, getUserSearchHistory } from '../utils/analytics';
import { getSupportedFormats, isSupportedFormat } from '../utils/documentParsers';

async function testNewFeatures() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π RAG Bot...\n');

  // –¢–µ—Å—Ç 1: –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
  try {
    const testQueries = [
      '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN',
      '–ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      '–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—É—Å–∫–∞'
    ];

    for (const query of testQueries) {
      console.log(`\n   –ó–∞–ø—Ä–æ—Å: "${query}"`);
      const results = await hybridSearch(query, { maxResults: 3 });
      console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
      results.forEach((result, i) => {
        console.log(`   ${i + 1}. ${result.filename} (${result.search_type}, —Å–∫–æ—Ä: ${result.score.toFixed(3)})`);
      });
    }
    console.log('   ‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
  }

  // –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
  try {
    const analytics = await getSearchAnalytics(30);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${analytics.totalSearches}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${analytics.successfulSearches}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(analytics.averageResponseTime)}ms`);
    console.log(`   –¢–∏–ø—ã –ø–æ–∏—Å–∫–∞:`, analytics.searchTypes);
    console.log('   ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
  }

  // –¢–µ—Å—Ç 3: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
  try {
    const popularQueries = await getPopularQueries(5);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${popularQueries.length}`);
    popularQueries.forEach((query, i) => {
      console.log(`   ${i + 1}. "${query.query}" (${query.count} —Ä–∞–∑)`);
    });
    console.log('   ‚úÖ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
  }

  // –¢–µ—Å—Ç 4: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤...');
  try {
    const formats = getSupportedFormats();
    console.log(`   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${formats.join(', ')}`);
    
    const testFiles = [
      'document.pdf',
      'report.xlsx',
      'presentation.pptx',
      'manual.docx',
      'readme.txt',
      'unknown.xyz'
    ];

    testFiles.forEach(file => {
      const supported = isSupportedFormat(file);
      console.log(`   ${file}: ${supported ? '‚úÖ' : '‚ùå'}`);
    });
    console.log('   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤:', error);
  }

  // –¢–µ—Å—Ç 5: –£–º–Ω—ã–π –ø–æ–∏—Å–∫
  console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
  try {
    const smartQueries = [
      '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã?',
      '–ø—Ä–∞–≤–∏–ª–∞',
      '—á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–ø—É—Å–∫–∞'
    ];

    for (const query of smartQueries) {
      console.log(`\n   –£–º–Ω—ã–π –ø–æ–∏—Å–∫: "${query}"`);
      const results = await smartSearch(query);
      console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
      if (results.length > 0) {
        console.log(`   –¢–∏–ø –ø–æ–∏—Å–∫–∞: ${results[0].search_type}`);
      }
    }
    console.log('   ‚úÖ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
  }

  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testNewFeatures().catch(console.error);
}

export { testNewFeatures }; 