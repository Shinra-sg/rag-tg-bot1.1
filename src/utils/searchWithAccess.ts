import pool from "./db";
import { execSync } from "child_process";
import { checkDocumentAccess } from "./documentAccess";

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Python-—Å–∫—Ä–∏–ø—Ç
 * @param text
 * @returns number[]
 */
function getQueryEmbedding(text: string): number[] {
  const safeText = text.replace(/"/g, '\\"');
  const output = execSync(`python3 get_query_embedding.py "${safeText}"`).toString();
  return output.trim().split(',').map(Number);
}

/**
 * –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞ (RAG)
 * @param query –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param username Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
 * @returns –ú–∞—Å—Å–∏–≤ –∏–∑ —Ç—Ä—ë—Ö –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω—å—à–µ)
 */
export async function searchInstructionsWithAccess(query: string, username?: string) {
  // –ï—Å–ª–∏ username –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (!username) {
    console.log("üîí –ü–æ–∏—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: username –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω");
    return [];
  }

  // –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
  let embedding: number[];
  try {
    embedding = getQueryEmbedding(query);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞:", e);
    // Fallback –Ω–∞ ILIKE —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
    return fallbackSearchWithAccess(query, username);
  }

  // –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
  const res = await pool.query(
    `SELECT ic.*, ic.embedding <#> $1 AS distance, d.id as document_id
     FROM instruction_chunks ic
     JOIN documents d ON ic.filename = d.original_name OR ic.filename = SUBSTRING(d.filename FROM '([^/]+)$')
     WHERE ic.embedding IS NOT NULL
     ORDER BY distance ASC
     LIMIT 20;`,
    [JSON.stringify(embedding)]
  );

  if (res.rows.length > 0) {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ—Å—Ç—É–ø—É –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const seen = new Set<string>();
    const unique = [];
    
    for (const chunk of res.rows) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
      const hasAccess = await checkDocumentAccess(chunk.document_id, username);
      if (!hasAccess) {
        console.log(`üîí –î–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É ${chunk.document_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è @${username}`);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      if (!seen.has(chunk.content)) {
        seen.add(chunk.content);
        unique.push({
          content: chunk.content,
          filename: chunk.filename,
          source_ref: chunk.source_ref
        });
        if (unique.length >= 3) break;
      }
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${unique.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è @${username}`);
    return unique;
  }

  // Fallback –Ω–∞ ILIKE —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  return fallbackSearchWithAccess(query, username);
}

async function fallbackSearchWithAccess(query: string, username: string) {
  const res = await pool.query(
    `SELECT ic.*, d.id as document_id
     FROM instruction_chunks ic
     JOIN documents d ON ic.filename = d.original_name OR ic.filename = SUBSTRING(d.filename FROM '([^/]+)$')
     WHERE ic.content ILIKE $1
     LIMIT 20;`,
    [`%${query}%`]
  );
  
  const seen = new Set<string>();
  const unique = [];
  
  for (const chunk of res.rows) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
    const hasAccess = await checkDocumentAccess(chunk.document_id, username);
    if (!hasAccess) {
      console.log(`üîí –î–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É ${chunk.document_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è @${username}`);
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (!seen.has(chunk.content)) {
      seen.add(chunk.content);
      unique.push({
        content: chunk.content,
        filename: chunk.filename,
        source_ref: chunk.source_ref
      });
      if (unique.length >= 3) break;
    }
  }
  
  console.log(`‚úÖ Fallback: –Ω–∞–π–¥–µ–Ω–æ ${unique.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è @${username}`);
  return unique;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param username Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
export async function getAvailableDocuments(username: string) {
  try {
    const res = await pool.query(`
      SELECT DISTINCT d.id, d.original_name, d.filename, d.type, c.name as category
      FROM documents d
      LEFT JOIN categories c ON d.category_id = c.id
      INNER JOIN document_access da ON d.id = da.document_id
      WHERE da.username = $1 AND da.is_active = TRUE
      ORDER BY d.uploaded_at DESC
    `, [username.startsWith('@') ? username.slice(1) : username]);

    return res.rows;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", error);
    return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
 * @param username Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns true –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø —Ö–æ—Ç—è –±—ã –∫ –æ–¥–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
 */
export async function hasAnyAccess(username: string): Promise<boolean> {
  try {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    // –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É document_access
    const res = await pool.query(`
      SELECT 1 FROM document_access 
      WHERE username = $1 AND is_active = TRUE 
      LIMIT 1
    `, [username.startsWith('@') ? username.slice(1) : username]);

    return res.rows.length > 0;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞:", error);
    return false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
  }
} 