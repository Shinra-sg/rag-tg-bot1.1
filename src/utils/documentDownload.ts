import * as fs from 'fs';
import * as path from 'path';
import pool from './db';

export interface DocumentInfo {
  id: number;
  filename: string;
  original_name: string;
  type: string;
  uploaded_at: Date;
  category?: string;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ ID
 */
export async function getDocumentById(documentId: number): Promise<DocumentInfo | null> {
  try {
    const result = await pool.query(`
      SELECT d.id, d.filename, d.original_name, d.type, d.uploaded_at, c.name AS category
      FROM documents d
      LEFT JOIN categories c ON d.category_id = c.id
      WHERE d.id = $1
    `, [documentId]);
    
    if (result.rows.length === 0) {
      return null;
    }
    
    return result.rows[0];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏
 */
export async function getDocumentByOriginalName(originalName: string): Promise<DocumentInfo | null> {
  try {
    const result = await pool.query(`
      SELECT d.id, d.filename, d.original_name, d.type, d.uploaded_at, c.name AS category
      FROM documents d
      LEFT JOIN categories c ON d.category_id = c.id
      WHERE d.original_name = $1
    `, [originalName]);
    
    if (result.rows.length === 0) {
      return null;
    }
    
    return result.rows[0];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏:', error);
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
export function documentFileExists(documentInfo: DocumentInfo): boolean {
  try {
    // –ï—Å–ª–∏ filename —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ raw –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    let filePath = documentInfo.filename;
    if (!filePath.includes('/') && !filePath.includes('\\')) {
      filePath = path.join(__dirname, '../data/raw', filePath);
    }
    return fs.existsSync(filePath);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
export function getDocumentFileSize(documentInfo: DocumentInfo): number {
  try {
    if (!documentFileExists(documentInfo)) {
      return 0;
    }
    // –ï—Å–ª–∏ filename —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ raw –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    let filePath = documentInfo.filename;
    if (!filePath.includes('/') && !filePath.includes('\\')) {
      filePath = path.join(__dirname, '../data/raw', filePath);
    }
    const stats = fs.statSync(filePath);
    return stats.size;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞:', error);
    return 0;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 –ë';
  
  const k = 1024;
  const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
 */
export function getMimeType(filename: string): string {
  const ext = path.extname(filename).toLowerCase();
  
  const mimeTypes: { [key: string]: string } = {
    '.pdf': 'application/pdf',
    '.md': 'text/markdown',
    '.txt': 'text/plain',
    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    '.doc': 'application/msword',
    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    '.xls': 'application/vnd.ms-excel',
    '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    '.ppt': 'application/vnd.ms-powerpoint',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.png': 'image/png',
    '.bmp': 'image/bmp',
    '.tiff': 'image/tiff',
    '.tif': 'image/tiff',
    '.webp': 'image/webp'
  };
  
  return mimeTypes[ext] || 'application/octet-stream';
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 */
export function createDownloadableCopy(documentInfo: DocumentInfo): string | null {
  try {
    if (!documentFileExists(documentInfo)) {
      return null;
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const tempDir = path.join(__dirname, '../../temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
    const tempPath = path.join(tempDir, documentInfo.original_name);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    let sourcePath = documentInfo.filename;
    if (!sourcePath.includes('/') && !sourcePath.includes('\\')) {
      sourcePath = path.join(__dirname, '../data/raw', sourcePath);
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
    fs.copyFileSync(sourcePath, tempPath);
    
    return tempPath;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞:', error);
    return null;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
 */
export function cleanupTempFiles(): void {
  try {
    const tempDir = path.join(__dirname, '../../temp');
    if (!fs.existsSync(tempDir)) {
      return;
    }
    
    const files = fs.readdirSync(tempDir);
    const oneHourAgo = Date.now() - (60 * 60 * 1000);
    
    files.forEach(file => {
      const filePath = path.join(tempDir, file);
      const stats = fs.statSync(filePath);
      
      if (stats.mtime.getTime() < oneHourAgo) {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${file}`);
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
  }
}
