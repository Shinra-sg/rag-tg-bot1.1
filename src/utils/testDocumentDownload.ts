import { 
  getDocumentByOriginalName, 
  documentFileExists, 
  getDocumentFileSize, 
  formatFileSize, 
  getMimeType,
  createDownloadableCopy,
  cleanupTempFiles
} from './documentDownload';

async function testDocumentDownload() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...\n');

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  console.log('üìè –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞:');
  const testSizes = [0, 1024, 1024 * 1024, 1024 * 1024 * 1024];
  testSizes.forEach(size => {
    console.log(`  ${size} –±–∞–π—Ç = ${formatFileSize(size)}`);
  });
  console.log('');

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–æ–≤
  console.log('üìã –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MIME-—Ç–∏–ø–æ–≤:');
  const testFiles = [
    'document.pdf',
    'image.jpg',
    'data.xlsx',
    'presentation.pptx',
    'text.txt',
    'unknown.xyz'
  ];
  testFiles.forEach(file => {
    console.log(`  ${file} = ${getMimeType(file)}`);
  });
  console.log('');

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ë–î
  console.log('üîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
    const result = await getDocumentByOriginalName('Instruction.md');
    if (result) {
      console.log(`  ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: ${result.original_name}`);
      console.log(`  üìÅ –ü—É—Ç—å: ${result.filename}`);
      console.log(`  üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(getDocumentFileSize(result))}`);
      console.log(`  üè∑Ô∏è –¢–∏–ø: ${result.type}`);
      console.log(`  üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: ${new Date(result.uploaded_at).toLocaleString()}`);
      
      // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      console.log(`  üìÇ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${documentFileExists(result) ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      
      // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ø–∏–∏
      if (documentFileExists(result)) {
        console.log('  üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ø–∏–∏...');
        const tempPath = createDownloadableCopy(result);
        if (tempPath) {
          console.log(`  ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${tempPath}`);
          
          // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          console.log('  üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
          cleanupTempFiles();
          console.log('  ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
        } else {
          console.log('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é');
        }
      }
    } else {
      console.log('  ‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç Instruction.md –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (error) {
    console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testDocumentDownload().catch(console.error);
}

export { testDocumentDownload };
