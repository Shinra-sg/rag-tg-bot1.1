import { execSync } from "child_process";
import pool from "./db";
import { spawn } from "child_process";

async function startWithCleanup() {
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π...\n");
    
    // 1. –ó–∞–ø—É—Å–∫ PostgreSQL
    console.log("1. –ó–∞–ø—É—Å–∫ PostgreSQL...");
    try {
      execSync("brew services start postgresql@14", { stdio: 'inherit' });
      console.log("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω");
    } catch (e) {
      console.log("‚ö†Ô∏è PostgreSQL —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞");
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    console.log("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
    const duplicatesResult = await pool.query(`
      SELECT COUNT(*) as total, COUNT(DISTINCT content) as unique_count 
      FROM instruction_chunks
    `);
    
    const total = parseInt(duplicatesResult.rows[0].total);
    const unique = parseInt(duplicatesResult.rows[0].unique_count);
    
    if (total > 0) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${total}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${unique}`);
      
      if (total > unique) {
        console.log("   üßπ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É...");
        await cleanDuplicates();
      } else {
        console.log("   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      }
    } else {
      console.log("   üìù –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É");
    }
    
    // 3. –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
    console.log("\n3. –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...");
    try {
      execSync("ts-node src/data/loadAll.ts", { stdio: 'inherit' });
      console.log("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω");
    } catch (e) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:", e);
    }
    
    // 3.5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    console.log("\n3.5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...");
    try {
      execSync("ts-node src/utils/setupAnalytics.ts", { stdio: 'inherit' });
      console.log("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
    } catch (e) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", e);
    }
    
    // 3.6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    console.log("\n3.6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º...");
    try {
      execSync("ts-node src/utils/setupDocumentAccess.ts", { stdio: 'inherit' });
      console.log("‚úÖ –î–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    } catch (e) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:", e);
    }
    
    // 3.7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–æ–≤
    console.log("\n3.7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–æ–≤...");
    try {
      execSync("ts-node src/utils/setupAdminsTable.ts", { stdio: 'inherit' });
      console.log("‚úÖ –ê–¥–º–∏–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    } catch (e) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤:", e);
    }
    
    // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    console.log("\n4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...");
    try {
      execSync("python3 generate_embeddings.py", { stdio: 'inherit' });
      console.log("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");
    } catch (e) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:", e);
    }
    
    // 5. –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    try {
      execSync("ts-node src/utils/testDb.ts", { stdio: 'inherit' });
      console.log("‚úÖ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω");
    } catch (e) {
      console.log("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", e);
    }
    
    // 6. –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
    console.log("\n6. –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ —É–∂–µ –±–æ—Ç—ã
    try {
      const checkBots = execSync("ps aux | grep -E 'ts-node.*(src/index|admin-bot|dashboard)' | grep -v grep", { encoding: 'utf8' });
      if (checkBots.trim()) {
        console.log("   ‚ö†Ô∏è –ë–æ—Ç—ã –∏ –¥–∞—à–±–æ—Ä–¥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...");
        execSync("pkill -f 'ts-node.*(src/index|admin-bot|dashboard)'", { stdio: 'ignore' });
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    } catch (e) {
      // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞—à–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å—ã, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    }
    
    console.log("   ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç, –∞–¥–º–∏–Ω-–±–æ—Ç –∏ –¥–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ");
    console.log("   üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pkill -f 'ts-node'");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
      const mainBot = spawn("ts-node", ["src/index.ts"], { 
        stdio: 'inherit',
        detached: true 
      });
      mainBot.unref();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–±–æ—Ç
      const adminBot = spawn("ts-node", ["src/admin-bot/index.ts"], { 
        stdio: 'inherit',
        detached: true 
      });
      adminBot.unref();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∞—à–±–æ—Ä–¥
      const dashboard = spawn("ts-node", ["src/dashboard/dashboard.ts"], { 
        stdio: 'inherit',
        detached: true 
      });
      dashboard.unref();
      
      console.log("   ‚úÖ –ë–æ—Ç—ã –∏ –¥–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ");
    } catch (e) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤:", e);
    }
    
    console.log("\nüéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!");
    console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    console.log("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:");
    console.log("   ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: http://localhost:3000");
    console.log("   üëë –ê–¥–º–∏–Ω-–±–æ—Ç: http://localhost:3000");
    console.log("   üìä –î–∞—à–±–æ—Ä–¥: http://localhost:3001");
    
    const finalResult = await pool.query(`
      SELECT 
        COUNT(*) as total_chunks,
        COUNT(CASE WHEN embedding IS NOT NULL THEN 1 END) as with_embeddings,
        COUNT(CASE WHEN embedding IS NULL THEN 1 END) as without_embeddings
      FROM instruction_chunks
    `);
    
    const stats = finalResult.rows[0];
    console.log(`   üìÑ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: ${stats.total_chunks}`);
    console.log(`   üî¢ –° —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: ${stats.with_embeddings}`);
    console.log(`   ‚ö†Ô∏è –ë–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: ${stats.without_embeddings}`);
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã:", error);
  } finally {
    await pool.end();
  }
}

async function cleanDuplicates() {
  try {
    console.log("   üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...");
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    await pool.query(`
      CREATE TEMP TABLE temp_unique_chunks AS
      SELECT DISTINCT ON (content) 
        id,
        content,
        filename,
        chunk_index,
        type,
        source_ref,
        embedding
      FROM instruction_chunks
      ORDER BY content, id
    `);
    
    const uniqueResult = await pool.query("SELECT COUNT(*) FROM temp_unique_chunks");
    const uniqueCount = parseInt(uniqueResult.rows[0].count);
    
    // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    await pool.query("DELETE FROM instruction_chunks");
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ
    await pool.query(`
      INSERT INTO instruction_chunks (id, content, filename, chunk_index, type, source_ref, embedding)
      SELECT id, content, filename, chunk_index, type, source_ref, embedding
      FROM temp_unique_chunks
    `);
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await pool.query("REINDEX TABLE instruction_chunks");
    
    console.log(`   ‚úÖ –û—á–∏—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –æ—Å—Ç–∞–ª–æ—Å—å ${uniqueCount} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    
  } catch (error) {
    console.error("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:", error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
startWithCleanup(); 