import { 
  getDocumentByOriginalName, 
  documentFileExists, 
  getDocumentFileSize, 
  formatFileSize, 
  getMimeType,
  createDownloadableCopy,
  cleanupTempFiles
} from './documentDownload';

// –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
const mockSearchResults = [
  {
    content: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 1",
    filename: "lab_1.pdf",
    source_ref: "lab_1.pdf",
    score: 0.95,
    search_type: 'vector' as const
  },
  {
    content: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 2", 
    filename: "Instruction.md",
    source_ref: "Instruction.md",
    score: 0.87,
    search_type: 'vector' as const
  },
  {
    content: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 3",
    filename: "tems.docx", 
    source_ref: "tems.docx",
    score: 0.82,
    search_type: 'vector' as const
  }
];

async function testDownloadWithIndex() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–æ–≤...\n');

  // –°–∏–º—É–ª—è—Ü–∏—è userSearchResults
  const userSearchResults = new Map();
  userSearchResults.set(12345, mockSearchResults);

  console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:');
  mockSearchResults.forEach((result, index) => {
    console.log(`  [${index}] ${result.filename}`);
  });
  console.log('');

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
  for (let index = 0; index < mockSearchResults.length; index++) {
    console.log(`üîç –¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ [${index}]:`);
    
    const userResults = userSearchResults.get(12345);
    if (!userResults || !userResults[index]) {
      console.log(`  ‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }

    const result = userResults[index];
    const filename = result.filename;
    
    console.log(`  üìÑ –§–∞–π–ª: ${filename}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏–∑ –ë–î
    const documentInfo = await getDocumentByOriginalName(filename);
    if (!documentInfo) {
      console.log(`  ‚ùå –î–æ–∫—É–º–µ–Ω—Ç "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      continue;
    }
    
    console.log(`  ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ${documentInfo.original_name}`);
    console.log(`  üìÅ –ü—É—Ç—å: ${documentInfo.filename}`);
    console.log(`  üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(getDocumentFileSize(documentInfo))}`);
    console.log(`  üè∑Ô∏è –¢–∏–ø: ${documentInfo.type}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!documentFileExists(documentInfo)) {
      console.log(`  ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
      continue;
    }
    
    console.log(`  ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ø–∏–∏
    const tempPath = createDownloadableCopy(documentInfo);
    if (tempPath) {
      console.log(`  ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${tempPath}`);
      
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      cleanupTempFiles();
      console.log(`  üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã`);
    } else {
      console.log(`  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é`);
    }
    
    console.log('');
  }

  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testDownloadWithIndex().catch(console.error);
}

export { testDownloadWithIndex };
