import pool from "./db";

async function checkDuplicates() {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ instruction_chunks...\n");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const totalResult = await pool.query("SELECT COUNT(*) FROM instruction_chunks");
    console.log(`1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${totalResult.rows[0].count}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∏–º—ã–µ
    const uniqueContentResult = await pool.query("SELECT COUNT(DISTINCT content) FROM instruction_chunks");
    console.log(`2. –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã—Ö: ${uniqueContentResult.rows[0].count}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    const duplicatesResult = await pool.query(`
      SELECT content, COUNT(*) as count 
      FROM instruction_chunks 
      GROUP BY content 
      HAVING COUNT(*) > 1 
      ORDER BY count DESC 
      LIMIT 10
    `);
    
    console.log(`3. –ù–∞–π–¥–µ–Ω–æ ${duplicatesResult.rows.length} —Å–æ–¥–µ—Ä–∂–∏–º—ã—Ö —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏:`);
    duplicatesResult.rows.forEach((row, i) => {
      console.log(`   ${i+1}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${row.count}`);
      console.log(`      –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${row.content.substring(0, 100)}...`);
      console.log("");
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ filename + content
    const fileContentDuplicatesResult = await pool.query(`
      SELECT filename, content, COUNT(*) as count 
      FROM instruction_chunks 
      GROUP BY filename, content 
      HAVING COUNT(*) > 1 
      ORDER BY count DESC 
      LIMIT 5
    `);
    
    console.log(`4. –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ñ–∞–π–ª—É + —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É:`);
    fileContentDuplicatesResult.rows.forEach((row, i) => {
      console.log(`   ${i+1}. –§–∞–π–ª: ${row.filename}, –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${row.count}`);
      console.log(`      –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${row.content.substring(0, 80)}...`);
      console.log("");
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    const sameContentDiffFilesResult = await pool.query(`
      SELECT content, COUNT(DISTINCT filename) as file_count, 
             array_agg(DISTINCT filename) as files
      FROM instruction_chunks 
      GROUP BY content 
      HAVING COUNT(DISTINCT filename) > 1 
      ORDER BY file_count DESC 
      LIMIT 5
    `);
    
    console.log(`5. –û–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö:`);
    sameContentDiffFilesResult.rows.forEach((row, i) => {
      console.log(`   ${i+1}. –§–∞–π–ª–æ–≤: ${row.file_count}`);
      console.log(`      –§–∞–π–ª—ã: ${row.files.join(', ')}`);
      console.log(`      –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${row.content.substring(0, 80)}...`);
      console.log("");
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    const noEmbeddingsResult = await pool.query(`
      SELECT filename, COUNT(*) as count 
      FROM instruction_chunks 
      WHERE embedding IS NULL 
      GROUP BY filename 
      ORDER BY count DESC 
      LIMIT 5
    `);
    
    console.log(`6. –ó–∞–ø–∏—Å–∏ –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø–æ —Ñ–∞–π–ª–∞–º:`);
    noEmbeddingsResult.rows.forEach((row, i) => {
      console.log(`   ${i+1}. –§–∞–π–ª: ${row.filename}, –ó–∞–ø–∏—Å–µ–π –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: ${row.count}`);
    });
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:", error);
  } finally {
    await pool.end();
  }
}

checkDuplicates(); 