import pool from "./db";

async function cleanDuplicates() {
  try {
    console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ instruction_chunks...\n");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏
    const beforeResult = await pool.query("SELECT COUNT(*) FROM instruction_chunks");
    console.log(`1. –ó–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏: ${beforeResult.rows[0].count}`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    console.log("2. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏...");
    await pool.query(`
      CREATE TEMP TABLE temp_unique_chunks AS
      SELECT DISTINCT ON (content) 
        id,
        content,
        filename,
        chunk_index,
        type,
        source_ref,
        embedding
      FROM instruction_chunks
      ORDER BY content, id
    `);
    
    const uniqueResult = await pool.query("SELECT COUNT(*) FROM temp_unique_chunks");
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${uniqueResult.rows[0].count}`);
    
    // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    console.log("3. –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...");
    await pool.query("DELETE FROM instruction_chunks");
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ
    console.log("4. –í—Å—Ç–∞–≤–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...");
    await pool.query(`
      INSERT INTO instruction_chunks (id, content, filename, chunk_index, type, source_ref, embedding)
      SELECT id, content, filename, chunk_index, type, source_ref, embedding
      FROM temp_unique_chunks
    `);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const afterResult = await pool.query("SELECT COUNT(*) FROM instruction_chunks");
    console.log(`5. –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: ${afterResult.rows[0].count}`);
    
    const removed = parseInt(beforeResult.rows[0].count) - parseInt(afterResult.rows[0].count);
    console.log(`6. –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${removed}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    const embeddingsResult = await pool.query("SELECT COUNT(*) FROM instruction_chunks WHERE embedding IS NOT NULL");
    console.log(`7. –ó–∞–ø–∏—Å–µ–π —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: ${embeddingsResult.rows[0].count}`);
    
    const noEmbeddingsResult = await pool.query("SELECT COUNT(*) FROM instruction_chunks WHERE embedding IS NULL");
    console.log(`8. –ó–∞–ø–∏—Å–µ–π –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: ${noEmbeddingsResult.rows[0].count}`);
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log("9. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...");
    await pool.query("REINDEX TABLE instruction_chunks");
    
    console.log("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:", error);
  } finally {
    await pool.end();
  }
}

cleanDuplicates(); 