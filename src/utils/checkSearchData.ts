import pool from "./db";
import { searchInstructions } from "./search";

async function checkSearchData() {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞...\n");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É instruction_chunks
    console.log("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã instruction_chunks:");
    const chunksResult = await pool.query("SELECT COUNT(*) FROM instruction_chunks");
    console.log(`   –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: ${chunksResult.rows[0].count}`);
    
    if (parseInt(chunksResult.rows[0].count) > 0) {
      const sampleResult = await pool.query("SELECT content, filename, source_ref FROM instruction_chunks LIMIT 3");
      console.log("   –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤:");
      sampleResult.rows.forEach((chunk, i) => {
        console.log(`   ${i+1}. –§–∞–π–ª: ${chunk.filename}`);
        console.log(`      –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${chunk.content.substring(0, 100)}...`);
        console.log(`      –ò—Å—Ç–æ—á–Ω–∏–∫: ${chunk.source_ref}`);
        console.log("");
      });
    } else {
      console.log("   ‚ùå –¢–∞–±–ª–∏—Ü–∞ instruction_chunks –ø—É—Å—Ç–∞!");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    console.log("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:");
    const embeddingsResult = await pool.query("SELECT COUNT(*) FROM instruction_chunks WHERE embedding IS NOT NULL");
    console.log(`   –ß–∞–Ω–∫–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: ${embeddingsResult.rows[0].count}`);
    
    const noEmbeddingsResult = await pool.query("SELECT COUNT(*) FROM instruction_chunks WHERE embedding IS NULL");
    console.log(`   –ß–∞–Ω–∫–æ–≤ –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: ${noEmbeddingsResult.rows[0].count}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    console.log("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞:");
    const testQueries = [
      "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
      "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞", 
      "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
      "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
    ];
    
    for (const query of testQueries) {
      console.log(`\n   –ó–∞–ø—Ä–æ—Å: "${query}"`);
      try {
        const results = await searchInstructions(query);
        console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
        if (results.length > 0) {
          results.forEach((result, i) => {
            console.log(`     ${i+1}. –§–∞–π–ª: ${result.filename}`);
            console.log(`        –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${result.content.substring(0, 80)}...`);
          });
        } else {
          console.log("     ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }
      } catch (error) {
        console.log(`     ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:");
    const allResults = await searchInstructions("–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è");
    const uniqueContents = new Set(allResults.map(r => r.content));
    console.log(`   –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${allResults.length}`);
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã—Ö: ${uniqueContents.size}`);
    
    if (allResults.length !== uniqueContents.size) {
      console.log("   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö!");
    } else {
      console.log("   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:", error);
  } finally {
    await pool.end();
  }
}

checkSearchData(); 