import pool from "./db";

/**
 * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –ø–æ–∏—Å–∫–∞ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
 */
export async function cleanupOldSearchLogs(daysToKeep: number = 30): Promise<{
  success: boolean;
  deletedCount: number;
  message: string;
}> {
  try {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

    const result = await pool.query(
      `DELETE FROM search_logs 
       WHERE created_at < $1`,
      [cutoffDate]
    );

    const deletedCount = result.rowCount || 0;
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–∏—Å–∫–∞ (—Å—Ç–∞—Ä—à–µ ${daysToKeep} –¥–Ω–µ–π)`);

    return {
      success: true,
      deletedCount,
      message: `–û—á–∏—â–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–∏—Å–∫–∞`
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤:", error);
    return {
      success: false,
      deletedCount: 0,
      message: `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error}`
    };
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)
 */
export async function cleanupOldUserHistory(daysToKeep: number = 90): Promise<{
  success: boolean;
  deletedCount: number;
  message: string;
}> {
  try {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

    const result = await pool.query(
      `DELETE FROM user_search_history 
       WHERE created_at < $1`,
      [cutoffDate]
    );

    const deletedCount = result.rowCount || 0;
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä—à–µ ${daysToKeep} –¥–Ω–µ–π)`);

    return {
      success: true,
      deletedCount,
      message: `–û—á–∏—â–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    return {
      success: false,
      deletedCount: 0,
      message: `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error}`
    };
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º (—Å—Ç–∞—Ä—à–µ 180 –¥–Ω–µ–π)
 */
export async function cleanupInactiveDocumentAccess(daysToKeep: number = 180): Promise<{
  success: boolean;
  deletedCount: number;
  message: string;
}> {
  try {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

    const result = await pool.query(
      `DELETE FROM document_access 
       WHERE created_at < $1 AND is_active = FALSE`,
      [cutoffDate]
    );

    const deletedCount = result.rowCount || 0;
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${deletedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º (—Å—Ç–∞—Ä—à–µ ${daysToKeep} –¥–Ω–µ–π)`);

    return {
      success: true,
      deletedCount,
      message: `–û—á–∏—â–µ–Ω–æ ${deletedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞`
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:", error);
    return {
      success: false,
      deletedCount: 0,
      message: `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error}`
    };
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É —Å–∏—Å—Ç–µ–º—ã
 */
export async function performFullCleanup(): Promise<{
  success: boolean;
  results: {
    searchLogs: { success: boolean; deletedCount: number; message: string };
    userHistory: { success: boolean; deletedCount: number; message: string };
    documentAccess: { success: boolean; deletedCount: number; message: string };
  };
  totalDeleted: number;
  message: string;
}> {
  console.log("üßπ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É —Å–∏—Å—Ç–µ–º—ã...");

  const searchLogs = await cleanupOldSearchLogs(30);
  const userHistory = await cleanupOldUserHistory(90);
  const documentAccess = await cleanupInactiveDocumentAccess(180);

  const totalDeleted = searchLogs.deletedCount + userHistory.deletedCount + documentAccess.deletedCount;

  const success = searchLogs.success && userHistory.success && documentAccess.success;

  const message = success 
    ? `–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –£–¥–∞–ª–µ–Ω–æ ${totalDeleted} –∑–∞–ø–∏—Å–µ–π.`
    : "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.";

  console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${message}`);

  return {
    success,
    results: {
      searchLogs,
      userHistory,
      documentAccess
    },
    totalDeleted,
    message
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ç–∞–±–ª–∏—Ü
 */
export async function getDatabaseStats(): Promise<{
  searchLogs: number;
  userHistory: number;
  documentAccess: number;
  popularQueries: number;
  userFavorites: number;
  totalSize: string;
}> {
  try {
    const stats = await Promise.all([
      pool.query("SELECT COUNT(*) FROM search_logs"),
      pool.query("SELECT COUNT(*) FROM user_search_history"),
      pool.query("SELECT COUNT(*) FROM document_access"),
      pool.query("SELECT COUNT(*) FROM popular_queries"),
      pool.query("SELECT COUNT(*) FROM user_favorites"),
      pool.query(`
        SELECT pg_size_pretty(pg_total_relation_size('search_logs') + 
                             pg_total_relation_size('user_search_history') + 
                             pg_total_relation_size('document_access') + 
                             pg_total_relation_size('popular_queries') + 
                             pg_total_relation_size('user_favorites')) as total_size
      `)
    ]);

    return {
      searchLogs: parseInt(stats[0].rows[0].count),
      userHistory: parseInt(stats[1].rows[0].count),
      documentAccess: parseInt(stats[2].rows[0].count),
      popularQueries: parseInt(stats[3].rows[0].count),
      userFavorites: parseInt(stats[4].rows[0].count),
      totalSize: stats[5].rows[0].total_size
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î:", error);
    return {
      searchLogs: 0,
      userHistory: 0,
      documentAccess: 0,
      popularQueries: 0,
      userFavorites: 0,
      totalSize: "0 bytes"
    };
  }
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (VACUUM –∏ ANALYZE)
 */
export async function optimizeDatabase(): Promise<{
  success: boolean;
  message: string;
}> {
  try {
    console.log("üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    // VACUUM –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞
    await pool.query("VACUUM ANALYZE search_logs");
    await pool.query("VACUUM ANALYZE user_search_history");
    await pool.query("VACUUM ANALYZE document_access");
    await pool.query("VACUUM ANALYZE popular_queries");
    await pool.query("VACUUM ANALYZE user_favorites");

    console.log("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

    return {
      success: true,
      message: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î:", error);
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${error}`
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default {
  cleanupOldSearchLogs,
  cleanupOldUserHistory,
  cleanupInactiveDocumentAccess,
  performFullCleanup,
  getDatabaseStats,
  optimizeDatabase
};