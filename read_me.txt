for Postgres{
psql -U shinra -d ragbot
\d instruction_chunks
\q}

for launch parser {npm run start:parser}

for launch tg-bot {npm run start:bot}

test for DB {npx ts-node src/utils/testDb.ts}

for launch embedding {python3 generate_embeddings.py}

launch all {npm run start:all}

lauch admin_bot {npm run start:admin}

launch ollama {ollama serve
               ollama run deepseek-r1}

requirements:
1)доделать осмысленный поиск, по "человечускому" запросу
2)добавить ссылку на файл из которого берется информация к ответу основного бота
3)сохранять в векторную базу(через докер, по портам)
4)выделение используемой информации на общем тексте в ответе пользователю
5)возможность добавления админов не через ID
6)сделать активно интерактивный интерфейс
7)разграничить права доступа на информацию для пользователей




реализованно:
1.тг-бот для пользователей который ищет по ключевым словам, нужную информацию по загруженным документам
2.документы отпарсированны (400 символов с перекрытием 50)
3.подключенна база данных Postgres и сохранение мета-данных
4.поиск происходит по принципу подстроки (ILIKE) в базе данных, возврат 3 уникальных релевантных чанков(есть фильтрация на дубликаты)
5.Подключение к локальному Ollama серверу
6.Использование модели deepseek-r1
7.Генерация кратких ответов на основе найденных фрагментов
8.базовый интерфейс тг-бота и ответы
9.админ бот с функционалом: Управление документами (загрузка, удаление, перемещение)
                            Система категорий
                            Поиск документов
                            Пагинация для больших списков
                            Логирование действий администраторов
                            Проверка прав доступа по ID
10.частисный векторный поиск:   Python скрипт для генерации эмбеддингов
                                Модель all-MiniLM-L6-v2 для создания векторов
                                Сохранение эмбеддингов в PostgreSQL

в планах на неделю+/-(по важности):
1)доделать осмысленный поиск, по "человечускому" запросу
2)добавить ссылку на файл из которого берется информация к ответу основного бота
3)сохранять в векторную базу(через докер, по портам)
4)выделение используемой информации на общем тексте в ответе пользователю
5)возможность добавления админов не через ID
6)сделать активно интерактивный интерфейс
7)разграничить права доступа на информацию для пользователей